{
	"info": {
		"_postman_id": "282bad99-912f-49a3-a9e8-872dc9337ccb",
		"name": "tmt-nestjs-Reesha",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Login",
			"item": [
				{
					"name": "Reesha GQL [GQL]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let str = '';\r",
									"const key = 'abcdefgh1234567';\r",
									"const domain = '@tmmt.com';\r",
									"for(let i=0; i<=10; i++){\r",
									"str += key.charAt(Math.round(key.length*Math.random())); \r",
									"}\r",
									"const email = str+=domain;\r",
									"pm.environment.set(\"emailid\", email);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ReeshaSignup($input: ReeshaSignupInputDto!){\n  reeshaSignup(input:$input) {\n    success\n    message {\n      en\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"username\":\"wer\",\n    \"email\":\"{{emailid}}\",\n    \"password\":\"pass\",\n    \"mobile\":\"7807807\",\n    \"countryCode\":\"IND\",\n    \"oneSignalId\":\"12343243242344\",\n    \"osversion\":\"Playground\",\n    \"devicemodel\":\"Web\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{auth-server-gql}}",
							"host": [
								"{{auth-server-gql}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reesha Login [GQL]",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"    console.log(response.data.reeshaLogin.accessToken);\r",
									"    pm.environment.set(\"access-Token\", response.data.reeshaLogin.accessToken);\r",
									"    const response2 = pm.response.json();\r",
									"     pm.environment.set(\"refreshToken\", response2.data.reeshaLogin.refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ReeshaLogin($input: ReeshaLoginInputDto!){\n  reeshaLogin(input:$input) {\n    success\n    message {\n      ar\n    }\n    accessToken\n    refreshToken\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"email\":\"{{emailid}}\",\n    \"password\":\"pass\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{auth-server-gql}}",
							"host": [
								"{{auth-server-gql}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Reesha DeleteCSUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"const response = pm.response.json();\r",
									"    console.log(response.data.reeshaLogin.accessToken);\r",
									"    pm.environment.set(\"access-Token\", response.data.reeshaLogin.accessToken);\r",
									"    const response2 = pm.response.json();\r",
									"     pm.environment.set(\"refreshToken\", response2.data.reeshaLogin.refreshToken);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": " mutation reeshaDeleteCSUser($reeshaCustomerDeleteInputDto:ReeshaCustomerDeleteInputDto!)\n    {\n reeshaDeleteCSUser(\nreeshaCustomerDeleteInputDto: $reeshaCustomerDeleteInputDto\n){\n    standardResponse{\n        success\n        message{\n            ar\n            en\n        }\n    }\n    deletedId\n}\n}",
								"variables": "{\n    \"reeshaCustomerDeleteInputDto\":{\n        \"id\":\"1234\"\n    }\n}"
							}
						},
						"url": {
							"raw": "{{auth-server-gql}}",
							"host": [
								"{{auth-server-gql}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assign Reesha Roles [GQL]",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation AssignReeshaRole($input: ReeshaAssignRolesInputDto!){\n  assignReeshaRoles(input:$input) {\n    success\n    message {\n      ar\n    }\n  }\n}",
								"variables": "{\n  \"input\": {\n    \"reeshaId\":\"603622c249e0d13bae24f331\",\n    \"appType\":\"REESHA\"\n  }\n}"
							}
						},
						"url": {
							"raw": "{{auth-server-gql}}",
							"host": [
								"{{auth-server-gql}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "ReeshaLogout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{refreshToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "graphql",
							"graphql": {
								"query": "mutation ReeshaLogout {\n  reeshaLogout {\n    success\n    message{\n        en\n        ar\n        }\n    }\n}",
								"variables": ""
							}
						},
						"url": {
							"raw": "{{auth-server-gql}}",
							"host": [
								"{{auth-server-gql}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "roles:get",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjNhMzhlMWRhZjAyODQyODFlNDU1MTIiLCJzZXNzaW9uSWQiOiI1ZjNhMzk2MWZiZGJkYWNlNWI1N2FkNDQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MTI5NywiZXhwIjoxNTk3NjUyMTk3fQ.MEUCIQC9ev4xo3R55mC1jYVqEG44wmcYrOIqVNKpYmOdhp0ltQIgTE05WeRepY9zkQ-pOLCwJtv71dpln3WF7zLPINmroN4",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}roles",
					"host": [
						"{{baseUrl}}roles"
					]
				}
			},
			"response": []
		},
		{
			"name": "roles:create",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjNhMzhlMWRhZjAyODQyODFlNDU1MTIiLCJzZXNzaW9uSWQiOiI1ZjNhMzk2MWZiZGJkYWNlNWI1N2FkNDQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MTI5NywiZXhwIjoxNTk3NjUyMTk3fQ.MEUCIQC9ev4xo3R55mC1jYVqEG44wmcYrOIqVNKpYmOdhp0ltQIgTE05WeRepY9zkQ-pOLCwJtv71dpln3WF7zLPINmroN4",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "name",
							"value": "\"USER\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}roles/create",
					"host": [
						"{{baseUrl}}roles"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "roles:update",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjNhMzhlMWRhZjAyODQyODFlNDU1MTIiLCJzZXNzaW9uSWQiOiI1ZjNhMzk2MWZiZGJkYWNlNWI1N2FkNDQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MTI5NywiZXhwIjoxNTk3NjUyMTk3fQ.MEUCIQC9ev4xo3R55mC1jYVqEG44wmcYrOIqVNKpYmOdhp0ltQIgTE05WeRepY9zkQ-pOLCwJtv71dpln3WF7zLPINmroN4",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "newName",
							"value": "\"REESHA\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}roles/update/5f3a39d7daf0284281e45513",
					"host": [
						"{{baseUrl}}roles"
					],
					"path": [
						"update",
						"5f3a39d7daf0284281e45513"
					]
				}
			},
			"response": []
		},
		{
			"name": "roles:delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjNhMzhlMWRhZjAyODQyODFlNDU1MTIiLCJzZXNzaW9uSWQiOiI1ZjNhMzk2MWZiZGJkYWNlNWI1N2FkNDQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MTI5NywiZXhwIjoxNTk3NjUyMTk3fQ.MEUCIQC9ev4xo3R55mC1jYVqEG44wmcYrOIqVNKpYmOdhp0ltQIgTE05WeRepY9zkQ-pOLCwJtv71dpln3WF7zLPINmroN4",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "newName",
							"value": "\"REESHA\"",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}roles/delete/5f3a39d7daf0284281e45513",
					"host": [
						"{{baseUrl}}roles"
					],
					"path": [
						"delete",
						"5f3a39d7daf0284281e45513"
					]
				}
			},
			"response": []
		},
		{
			"name": "roles:getbyId",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjNhMzhlMWRhZjAyODQyODFlNDU1MTIiLCJzZXNzaW9uSWQiOiI1ZjNhMzk2MWZiZGJkYWNlNWI1N2FkNDQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MTI5NywiZXhwIjoxNTk3NjUyMTk3fQ.MEUCIQC9ev4xo3R55mC1jYVqEG44wmcYrOIqVNKpYmOdhp0ltQIgTE05WeRepY9zkQ-pOLCwJtv71dpln3WF7zLPINmroN4",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "{{baseUrl}}roles/5f3a39d7daf0284281e45513",
					"host": [
						"{{baseUrl}}roles"
					],
					"path": [
						"5f3a39d7daf0284281e45513"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roles Mappers: Get All",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjMyODc4NGY3Y2I2MzIxMGY2ZWM2ZDciLCJzZXNzaW9uSWQiOiI1ZjMyODc4NWU0OGYwYjg5OTc4ZWI4ZTQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MjExNSwiZXhwIjoxNTk3NjUzMDE1fQ.MEQCIH5BrwvD1EgXzQ8lX1tn2qO-U30FalyEvcZQ4ws8vDFjAiBtSzT7nnAKqDbROZ_7YdVkpIKWRu2yto5Hu3V9kaM0RQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": ""
				},
				"url": {
					"raw": "{{baseUrl}}roles-mapper/",
					"host": [
						"{{baseUrl}}roles-mapper"
					],
					"path": [
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "Roles Mappers: Create",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjMyODc4NGY3Y2I2MzIxMGY2ZWM2ZDciLCJzZXNzaW9uSWQiOiI1ZjMyODc4NWU0OGYwYjg5OTc4ZWI4ZTQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MjExNSwiZXhwIjoxNTk3NjUzMDE1fQ.MEQCIH5BrwvD1EgXzQ8lX1tn2qO-U30FalyEvcZQ4ws8vDFjAiBtSzT7nnAKqDbROZ_7YdVkpIKWRu2yto5Hu3V9kaM0RQ",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"appType\":\"USER\",\n    \"roles\":[\"5efcd832fdb4108a090e29cb\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}roles-mapper/create",
					"host": [
						"{{baseUrl}}roles-mapper"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roles Mappers: Delete",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjMyODc4NGY3Y2I2MzIxMGY2ZWM2ZDciLCJzZXNzaW9uSWQiOiI1ZjMyODc4NWU0OGYwYjg5OTc4ZWI4ZTQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MjExNSwiZXhwIjoxNTk3NjUzMDE1fQ.MEQCIH5BrwvD1EgXzQ8lX1tn2qO-U30FalyEvcZQ4ws8vDFjAiBtSzT7nnAKqDbROZ_7YdVkpIKWRu2yto5Hu3V9kaM0RQ",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}roles-mapper/delete/5f08343ed5c40018c3aefaba",
					"host": [
						"{{baseUrl}}roles-mapper"
					],
					"path": [
						"delete",
						"5f08343ed5c40018c3aefaba"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roles Mappers: Update",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjMyODc4NGY3Y2I2MzIxMGY2ZWM2ZDciLCJzZXNzaW9uSWQiOiI1ZjMyODc4NWU0OGYwYjg5OTc4ZWI4ZTQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MjExNSwiZXhwIjoxNTk3NjUzMDE1fQ.MEQCIH5BrwvD1EgXzQ8lX1tn2qO-U30FalyEvcZQ4ws8vDFjAiBtSzT7nnAKqDbROZ_7YdVkpIKWRu2yto5Hu3V9kaM0RQ",
							"type": "string"
						}
					]
				},
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n\"appType\":\"userApp\",\n\"roles\":[\"5efcd832fdb4108a090e29cb\"]\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}roles-mapper/update/5f08343ed5c40018c3aefaba",
					"host": [
						"{{baseUrl}}roles-mapper"
					],
					"path": [
						"update",
						"5f08343ed5c40018c3aefaba"
					]
				}
			},
			"response": []
		},
		{
			"name": "Roles for App Type",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjMyODc4NGY3Y2I2MzIxMGY2ZWM2ZDciLCJzZXNzaW9uSWQiOiI1ZjMyODc4NWU0OGYwYjg5OTc4ZWI4ZTQiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6W10sImlhdCI6MTU5NzY1MjExNSwiZXhwIjoxNTk3NjUzMDE1fQ.MEQCIH5BrwvD1EgXzQ8lX1tn2qO-U30FalyEvcZQ4ws8vDFjAiBtSzT7nnAKqDbROZ_7YdVkpIKWRu2yto5Hu3V9kaM0RQ",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}roles-mapper/roles-for-app?appType=userApp",
					"host": [
						"{{baseUrl}}roles-mapper"
					],
					"path": [
						"roles-for-app"
					],
					"query": [
						{
							"key": "appType",
							"value": "userApp"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "ReeshaCreateTag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"     pm.environment.set(\"tagId\", response.data.reeshaCreateTag.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation reeshaCreateTag($tagInput: TagCreateInputDto!){\n  reeshaCreateTag(tagInput:$tagInput) {\n    id\n    name{en\n    ar}\n    tagType\n    isDeleted\n  }\n}",
						"variables": "{\n    \"tagInput\": {\n        \"name\": {\n            \"en\": \"sdfsdf\",\n            \"ar\": \"sdfsdf\"\n        },\n        \"tagType\": \"STORE\",\n        \"isDeleted\": false\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ReeshaEditTag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation reeshaEditTag($tagUpdateInput: TagUpdateInputDto!){\n  reeshaEditTag(tagUpdateInput:$tagUpdateInput) {\n    id\n    name{en\n    ar}\n    tagType\n    isDeleted\n  }\n}",
						"variables": "{\n    \"tagUpdateInput\": {\n        \"tagId\": \"{{tagId}}\",\n        \"name\": {\n            \"en\": \"asd\",\n            \"ar\": \"asd\"\n        },\n        \"tagType\": \"STORE\",\n        \"isDeleted\": false\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "reeshaDeleteTag",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation reeshaDeleteTag($tagId: String!){\n  reeshaDeleteTag(tagId:$tagId) {\n    status\n  }\n}",
						"variables": "{\n    \"tagId\":\"{{tagId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "reeshaGetTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query reeshaGetTags($tagIds: [String!]){\n  reeshaGetTags(tagIds:$tagIds) {\n    id\n    name{en\n    ar}\n    tagType\n    isDeleted\n  }\n}",
						"variables": "{\n    \"tagIds\":[\"{{tagId}}\"]\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createOrderCancelReason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createOrderCancelReason($orderCancelReasonCreateInputDto: OrderCancelReasonCreateInputDto!){\n  createOrderCancelReason(orderCancelReasonCreateInputDto:$orderCancelReasonCreateInputDto) {\n    _id\n    reason{en\n    ar}\n    appType\n  }\n}",
						"variables": "{\n    \"orderCancelReasonCreateInputDto\": {\n        \"reason\": {\n            \"en\": \"en1\",\n            \"ar\": \"ar1\"\n        },\n        \"appType\": \"DRIVER\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditOrderCancelReason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editOrderCancelReason($orderCancelReasonEditInputDto: OrderCancelReasonEditInputDto!){\n  editOrderCancelReason(orderCancelReasonEditInputDto:$orderCancelReasonEditInputDto) {\n    success\n    message{\n        en \n        ar\n    }\n  }\n}\n\n",
						"variables": "{\n    \"orderCancelReasonEditInputDto\": {\n        \"_id\":\"5ff313608364773d8daf491a\",\n        \"reason\": {\n            \"en\": \"en2\",\n            \"ar\": \"ar2\"\n        },\n        \"appType\": \"USER\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteOrderCancelReason",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteOrderCancelReason($orderCancelReasonId: String!){\n  deleteOrderCancelReason(orderCancelReasonId:$orderCancelReasonId) {\n    success\n    message{\n        en \n        ar\n    }\n  }\n}\n\n",
						"variables": "{\n    \"orderCancelReasonId\": \n\"5ff313608364773d8daf491a\"\n    \n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Rule [Rest Api]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ruleName\": \"rule-one\",\n    \"ruleObject\": {\n        \"ifElseList\": [\n            {\n                \"match\": {\n                    \"operator\": \"Equals\",\n                    \"operandOne\": true,\n                    \"operandTwo\": true\n                },\n                \"thenValue\": 180\n            }\n        ]\n    },\n    \"isEnabled\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server}}/rule-management/create-rule",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"rule-management",
						"create-rule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Rule [Rest API]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"ruleName\": \"rule-one\",\n    \"ruleObject\": {\n        \"ifElseList\": [\n            {\n                \"match\": {\n                    \"operator\": \"Equals\",\n                    \"operandOne\":  {\n                    \"operator\": \"Equals\",\n                    \"operandOne\": \"__countryCode\",\n                    \"operandTwo\": \"+91\"\n                },\n                    \"operandTwo\": \"+91\"\n                },\n                \"thenValue\": 180\n            },\n            {\n                \"match\": {\n                    \"operator\": \"Equals\",\n                    \"operandOne\": \"__countryCode\",\n                    \"operandTwo\": \"+974\"\n                },\n                \"thenValue\": 600\n            }\n        ]\n    },\n    \"isEnabled\": true\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server}}/rule-management/update-rule",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"rule-management",
						"update-rule"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Rules [Rest Api]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{auth-server}}/rule-management/all-rules",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"rule-management",
						"all-rules"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Rule [Rest API]",
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{auth-server}}/rule-management/rule/<your rule name here>",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"rule-management",
						"rule",
						"<your rule name here>"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Rule [Rest API]",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{auth-server}}/rule-management/rule/<your rule name here>",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"rule-management",
						"rule",
						"<your rule name here>"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateQualifyRule",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateQualifyRule(\n  $QualifyRuleCreateDto: QualifyRuleCreateDto!\n) {\n  createQualifyRule(\n    qualifyRuleCreateDto: $QualifyRuleCreateDto\n  ){\n    success\n  }\n}\n",
						"variables": "{\n  \"QualifyRuleCreateDto\": {\n  \"name\": \"test\",\n  \"driverCountperSearch\": 4,\n  \"searchingTime\": 30,\n  \"searchCount\": 2,\n  \"priority\": 1,\n  \"behaviours\":[\"6046d2bd4016db44c3e5c13c\"]\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateQualifyRule",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateQualifyRule($QualifyRuleUpdateDto: QualifyRuleUpdateDto!) {\n  updateQualifyRule(qualifyRuleUpdateDto:$QualifyRuleUpdateDto) {\n  message{ar}\n  \n  }\n}",
						"variables": "{\n  \"QualifyRuleUpdateDto\": {\n  \"_id\": \"6046d2bd4016db44c3e5c13c\",\n  \"name\": \"test1\",\n  \"priority\": 1\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FetchQualifyBehaviours",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query FetchQualifyBehaviours {\n  fetchQualifyBehaviours {conditions {\n      int: condition\n    }\n    _id\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateQualifyBehaviour",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateQualifyBehaviour($QualifyBehaviourUpdateDto: QualifyBehaviourUpdateDto!) {\n  updateQualifyBehaviour(qualifyBehaviourUpdateDto:$QualifyBehaviourUpdateDto) {\n  message{ar}\n  \n  }\n}",
						"variables": "{\n  \"QualifyBehaviourUpdateDto\": {\n  \"_id\": \"6051df4e0ba4371e8bc3f741\",\n  \"name\": \"test1\",\n  \"priority\": 1\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "FetchQualifyRules",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query FetchQualifyRules {\n  fetchQualifyRules {\n    _id\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "createQualifyBehaviour",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createQualifyBehaviour(\n  $QualifyBehaviourCreateDto: QualifyBehaviourCreateDto!\n) {\n  createQualifyBehaviour(\n    qualifyBehaviourCreateDto: $QualifyBehaviourCreateDto\n  ){\n    _id\n  }\n}",
						"variables": "{\n  \"QualifyBehaviourCreateDto\": {\n  \"name\": \"TEST\",\n  \"priority\": 1,\n    \"conditions\": [{\"int\": [{\"attributeCode\": \"RATING\",\"min\": 1,\"max\": 3}],\"condition\": \"AND\"}]\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Get Orders",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query reeshaGetOrders($ordersFindInputDto: OrdersFindInputDto!) {\n  reeshaGetOrders(ordersFindInputDto:$ordersFindInputDto) {\n   orders{\n       _id\n       userId\n       cartId\n       orderStatus\n       orderType\n       cancelReason {\n           en\n           ar\n       }\n   }\n  \n  }\n}",
						"variables": "{\n    \"ordersFindInputDto\":{\n        \"orderStatus\":\"PEN\",\n        \"orderType\":\"readyOrder\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Get Store Admin",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query reeshaGetStoreAdmin($adminId: String!) {\n  reeshaGetStoreAdmin(adminId:$adminId) {\n      username\n      email\n      mobileNumber\n      countryCode\n      iBan\n      isActivated\n      isDeleted\n      deviceType\n      parentId\n      restaurantIds\n  }\n}",
						"variables": "{\n    \"adminId\":\"6059cabea506650ac9c93409\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Get Users",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getUsers($userFindInputDto: UserFindInputDto!) {\n  getUsers(userFindInputDto:$userFindInputDto) {\n     users {\n         _id \n          name\n          email\n          countryCode\n          status\n          mobile\n         deviceId      \n         otp\n    }\n  }\n}",
						"variables": "{\n    \"userFindInputDto\":{\n        \"status\":\"ON\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Get User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getUser($userId: String!) {\n  getUser(userId:$userId) {\n      _id\n      name\n      email\n      countryCode\n      status\n      mobile\n  }\n}",
						"variables": "{\n    \"userId\":\"1234\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Drivers For Reesha [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getDriversForReesha($driverFilterInputDto: DriverFilterReeshaInputDto!) {\n  getDriversForReesha(driverFilterInputDto:$driverFilterInputDto) {\n      drivers {\n        _id\n        mobile\n        name\n        email\n        countryCode\n        lang\n      }\n      pagination {\n        hasNextPage\n        hasPrevPage\n        page\n        perPage\n      }\n      error\n  }\n}\n",
						"variables": "{\n    \"driverFilterInputDto\":{\n        \"email\":\"pious@gmail.com\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}\n"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get StoreMasters For Reesha [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getStoreMastersForReesha($storeMasterChefFiltersInputDto: StoreMasterChefFiltersReeshaInputDto) {\n  getStoreMastersForReesha(storeMasterChefFiltersInputDto:$storeMasterChefFiltersInputDto) {\n      storeMasters {\n        _id\n        userName\n        fullName\n        mobileNumber\n        countryCode\n        email\n        storeCode\n        ownerId\n        isDeleted\n      }\n      pagination {\n        hasNextPage\n        hasPrevPage\n        page\n        perPage\n      }\n      error\n  }\n}\n",
						"variables": "{\n    \"storeMasterChefFiltersInputDto\":{\n        \"email\":\"pious@gmail.com\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}\n"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get CSUsers For Reesha",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getCSUsersForReesha($csUsersForReeshaInputDto: CSUsersForReeshaInputDto!) {\n  getCSUsersForReesha(csUsersForReeshaInputDto:$csUsersForReeshaInputDto) {\n      csusers{\n          _id\n          username\n          email\n          mobile\n          osversion\n          devicemodel\n          countryCode\n      }\n      pagination {\n        hasNextPage\n        hasPrevPage\n        page\n        perPage\n      }\n  }\n}\n",
						"variables": "{\n    \"csUsersForReeshaInputDto\":{\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}\n"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Discount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " mutation CreateDiscount($discountCreateInput:DiscountCreateInput!)\n    {\n createDiscount(\ndiscountCreateInput: $discountCreateInput\n){\n    success\n    message\n}\n}",
						"variables": "{\n    \"discountCreateInput\": {\n        \"name\": \"Discount1\",\n        \"arName\": \"ArabicDiscount1\",\n        \"displayName\": {\n            \"en\": \"engDisplayName\",\n            \"ar\": \"arDisplayName\"\n        },\n        \"startsOn\": \"startdate\",\n        \"endsOn\": \"enddate\",\n        \"category\": \"OFFER\",\n        \"isConditional\": false,\n        \"restaurant\": {\n            \"name\": \"restaurantName\",\n            \"_id\": \"478324\",\n            \"geoHash\": {\n                \"coordinates\": [\n                    3,\n                    3,\n                    3\n                ],\n                \"type\": \"Point\"\n            }\n        },\n        \"discountValue\": \"243\",\n        \"discountIn\": \"Purchase\",\n        \"discountFor\": \"users\",\n        \"discountType\": \"instant\",\n        \"discountToEntities\": {\n            \"users\": {\n                \"maxOrdersCount\": \"32\"\n            }\n        },\n        \"serviceArea\": [\n            \"geoHashes...\"\n        ]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Dicounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query GetDiscounts($paginationInput:PaginationInputDto!)\n    {\n getDiscounts(\npaginationInput: $paginationInput\n){\n    discounts{\n        _id \nname \ndisplayName {\n    en\n    ar\n}\npromocodeSpecificOfferFor \narName \nstartsOn \nendsOn \ncategory \nisConditional \nrestaurant {\n    name\n}\ndiscountValue \ndiscountIn \ntypeOfPay \ndiscountFor \ndiscountType \nisDeleted \n    }\n    pagination{\nhasPrevPage \nhasNextPage \nprevPage \nnextPage \nperPage \npage \n    }\n}\n}",
						"variables": "{\n\"paginationInput\":{\n    \"page\":1,\n    \"perPage\":10\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Discounts for a particualar user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query GetDiscountsForUser($userDiscountDetail:UserDetailForDiscount!)\n    {\n getDiscountsForUser(\nuserDiscountDetail: $userDiscountDetail\n){\n    store{\n        name\n    }\n        product{\n        name\n    }    productCategories{\n        name\n    }    users{\n        name\n    }    geography{\n        name\n    }    productSpecial{\n        name\n    }\n}\n}",
						"variables": "{\n    \"userDiscountDetail\":{\n        \"_id\":\"98\",\n        \"serviceArea\":\"jlkdfldkj\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Discount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " mutation DeleteDiscount($discountID:String!)\n    {\n deleteDiscount(\ndiscountID: $discountID\n){\n \n success\n message\n}}",
						"variables": "{\n    \"discountID\":\"60534a5a4e27776e63581f1a\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Particular Discounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query GetParticularDiscounts($getParticularDiscountsInput:AdvancedSearchInputDto!)\n    {\n getParticularDiscounts(\ngetParticularDiscountsInput: $getParticularDiscountsInput\n){\n discounts{\nname\n }\n}\n    }",
						"variables": "{\n    \"getParticularDiscountsInput\":{\n        \"isConditional\":true,\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Advanced Search Discounts",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query GetAdvancedSearchDiscounts($advancedSearchInput:AdvancedSearchInputDto!)\n    {\n getAdvancedSearchDiscounts(\nadvancedSearchInput: $advancedSearchInput\n){\n discounts{\nname\n }\n}\n    }",
						"variables": "{\n    \"advancedSearchInput\":{\n        \"isConditional\":false,\n      \"discountIn\": \"Purchase\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products For Reesha Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query getProductsBasedOnStoreForReesha($productsFilterReeshaInputDto:ProductsFilterReeshaInputDto!)\n    {\n getProductsBasedOnStoreForReesha(\nproductsFilterReeshaInputDto: $productsFilterReeshaInputDto\n){\n    orders{\n        _id\n        orderStatus\n        orderType\n    }\n    pagination{\n        hasNextPage\n        hasPrevPage\n        nextPage\n        prevPage\n        page\n        perPage\n    }\n}\n}",
						"variables": "{\n    \"productsFilterReeshaInputDto\":{\n        \"userId\":\"12345\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Stores For Reesha Products",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query getStoresForReeshaProducts($storesForReeshaProductsDto:StoresForReeshaProductsDto!)\n    {\n getStoresForReeshaProducts(\nstoresForReeshaProductsDto: $storesForReeshaProductsDto\n){\n    stores{\n        _id\n    }\n    pagination{\n        hasNextPage\n        hasPrevPage\n        nextPage\n        prevPage\n        page\n        perPage\n    }\n}\n}",
						"variables": "{\n    \"storesForReeshaProductsDto\":{\n        \"name\":\"vignesh_tmmt\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Stores For Reesha",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query getStoresForReesha($reeshaGetStoresInputDto:ReeshaGetStoresInputDto!)\n    {\n getStoresForReesha(\nreeshaGetStoresInputDto: $reeshaGetStoresInputDto\n){\n    stores{\n        _id\n    }\n    pagination{\n        hasNextPage\n        hasPrevPage\n        nextPage\n        prevPage\n        page\n        perPage\n    }\n}\n}",
						"variables": "{\n    \"reeshaGetStoresInputDto\":{\n        \"city\":\"doha\",\n        \"restaurantType\":\"STOREXL\",\n        \"paginate\":{\n            \"page\":1,\n            \"perPage\":10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store For Reesha",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": " query reeshaGetStore($reeshaStoreFindInputDto:ReeshaStoreFindInputDto!)\n    {\n reeshaGetStore(\nreeshaStoreFindInputDto: $reeshaStoreFindInputDto\n){\n    _id\n    name\n    countryCode\n    description\n}\n}",
						"variables": "{\n    \"reeshaStoreFindInputDto\":{\n        \"_id\":\"1234\",\n        \"ownerId\":\"2345\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Get Order",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query reeshaGetOrder($ordersFindInputDto: SingleOrderFindDto!) {\n  reeshaGetOrder(ordersFindInputDto:$ordersFindInputDto) {\n       _id\n       userId\n       cartId\n       orderStatus\n       orderType\n       cancelReason {\n           en\n           ar\n       }\n  }\n}",
						"variables": "{\n    \"ordersFindInputDto\":{\n        \"orderId\":\"60936ac28a85fd1f5e2de6b5\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Reesha Toggle CSUsers isActivated",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleCSUserIsActivatedState($csUsersIsActivatedStateToggleInputDto:CSUsersIsActivatedStateToggleInputDto!) {\n  toggleCSUserIsActivatedState(csUsersIsActivatedStateToggleInputDto:$csUsersIsActivatedStateToggleInputDto) {\n       standardResponse{\n           success\n           message{\n               en\n               ar\n           }\n       }\n       _id\n       isActivated\n  }\n}",
						"variables": "{\n    \"csUsersIsActivatedStateToggleInputDto\":{\n        \"_id\":\"609901fbf9d83a23545be430\",\n        \"isActivated\":true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		}
	]
}