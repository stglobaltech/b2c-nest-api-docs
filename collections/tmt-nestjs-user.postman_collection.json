{
	"info": {
		"_postman_id": "330e9384-25aa-47fa-b2a5-3ccafa065a85",
		"name": "tmt-nestjs-user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Login [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5df48d25-c28f-4eef-9e10-99ad0529a2e3",
						"exec": [
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify User Login\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    console.log(\"Api response = \",json.data.userLogin.success);\r",
							"    //pm.expect(json.data.userLogin.success).to.be.true;\r",
							"    if(json.data.userLogin.success == true) {\r",
							"        pm.environment.set(\"token\",json.data.userLogin.accessToken);\r",
							"        pm.environment.set(\"refreshToken\", json.data.userLogin.refreshToken);\r",
							"    }\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));    \r",
							"});\r",
							"\r",
							"pm.test(\"isSignupRequired true run Signup\", function(){\r",
							"    pm.expect(json.data.userLogin.isSignUpRequired).to.be.true\r",
							"   if((json.data.userLogin.isSignUpRequired) == true)\r",
							"        postman.setNextRequest(\"User Signup\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  UserLogin($userLoginInputDto: UserLoginInputDto!){\n  userLogin(userLoginInputDto: $userLoginInputDto) {\n    success\n     message {\n      en\n      ar\n    }\n    accessToken\n    refreshToken\n    isSignUpRequired\n  }\n}",
						"variables": "{\n  \"userLoginInputDto\": {\n    \"countryCode\": \"{{countryCode}}\",\n    \"mobile\": \"{{mobileNo}}\",\n    \"deviceType\": \"IOS\",\n    \"otp\": \"{{otp}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Entity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8e1c42ac-84e0-4551-a93f-ea4dd25b9a09",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"Entityid\", response.data.createEntity.id);\r",
							"console.log(response.data.createEntity.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateEntity($entityInput: EntityCreateInputDto!) {\n  createEntity(entityInput: $entityInput) {\n    name {\n      ar\n      en\n    }\n    subEntityIds\n    type\n    adminStoreId\n    entityCategories\n    withoutDelivery\n    iconUrl {\n      ar\n      en\n    }\n    fullWidthIconUrl {\n      ar\n      en\n    }\n    halfWidthIconUrl {\n      ar\n      en\n    }\n    uiType\n    sortIndex\n    status\n    dataAPIQuery\n    cityIds\n  }\n}\n",
						"variables": "{\n  \"entityInput\": {\n     \"name\": { \"ar\": \"مطاعم1\", \"en\": \"RESTAURANTS1\" },\n      \"subEntityIds\": [],\n      \"type\": \"RESTAURANT\",\n      \"adminStoreId\": \"5fa94319bdfe015122f09ffc\",\n      \"entityCategories\": [],\n      \"withoutDelivery\": true,\n      \"iconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2d3aab20-2344-11eb-a74a-275df72bee34.png\",\n        \"en\":\"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a0ae5c80-2341-11eb-9b7d-cdb409930e55.png\"},\n      \"fullWidthIconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2e28b4a0-2344-11eb-9b7d-cdb409930e55.png\",\"en\":\"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a1142330-2341-11eb-a74a-275df72bee34.png\"},\n      \"halfWidthIconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2d98f7c0-2344-11eb-a74a-275df72bee34.png\", \"en\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a0eb1760-2341-11eb-9b7d-cdb409930e55.png\" },\n      \"uiType\": 0,\n      \"sortIndex\": 1,\n      \"status\": \"ACTIVE\",\n      \"dataAPIQuery\": \"dataAPIQuery\",\n      \"cityIds\": []\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Access token [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1c239e74-b1fd-423c-ba9c-926e5f731d8a",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"New Access Token\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    console.log(\"Api response = \",json.data.refreshToken.success);\r",
							"    pm.expect(json.data.refreshToken.success).to.be.true;\r",
							"    pm.environment.set(\"token\",json.data.refreshToken.accessToken);\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refreshToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation RefreshToken($accessTokenInputDto: BuildAccessTokenInputDto!){\n  refreshToken(accessTokenInputDto:$accessTokenInputDto){\n    accessToken\n  }\n}",
						"variables": "{\n  \"accessTokenInputDto\": {\n    \"accessToken\": \"{{token}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Access Token [Rest API]",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refresh-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accessToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjY4NmY1N2Y4N2Q4MjBmOGY0MTU4YzUiLCJzZXNzaW9uSWQiOiI1ZjY4NmY1NzMwZTRkZjEyZmIzNDFhMGUiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTYwMDY3OTc2NywiZXhwIjoxNjAwNjgwNjY3fQ.MEQCIGof84Lkzj6RsORH7f-gsOhz-S9VN2iapFmmGMjaVfcPAiAQqJeEZ4lah-3FlXBhT8OFpC8BGkZB1cvcmLVvAi5Q4Q\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server}}/tokens/refresh",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"tokens",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c36cb2eb-0d18-4806-88a1-cebb374f0a20",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    const variable = pm.response.json();\r",
							"    pm.environment.set(\"addressId\", variable.data.saveAddress.id);\r",
							"});\r",
							"pm.test(\"Response time validation\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation saveAddress($input: AddressInputDto!) {\n  saveAddress(addressInput: $input){\n    id\n    name\n    address\n    buildingNo\n    imageUrl\n    location {\n      coordinates\n      type\n    }\n  }\n}",
						"variables": "{\n  \"input\": {\n    \"name\": \"{{addrName}}\",\n    \"address\": \"first street, chennai\",\n    \"buildingNo\": \"19\",\n    \"imageUrl\": \"http://google.com\",\n    \"location\": {\n      \"coordinates\": [12.96738173,80.15095264],\n      \"type\": \"point\"\n    }\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Signup [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "e9a7f04d-1b88-40f5-92ce-73dfeca220ec",
						"exec": [
							"var email = \"auto+{{$randomInt}}@tmmt.com\"\r",
							"pm.variables.set(\"email\",email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8b0ecb65-d46f-4399-b614-b403a4235b31",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"Verify User Signup\", function(){\r",
							"    pm.expect(json.data.userSignup.success).to.be.true;\r",
							"    var email = pm.variables.get('email');\r",
							"    console.log(\"User Email, \",email);\r",
							"    pm.environment.set(\"uEmail\",email);\r",
							"\r",
							"    pm.environment.set(\"token\",json.data.userSignup.accessToken);\r",
							"    pm.environment.set(\"refreshToken\", json.data.userSignup.refreshToken);\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserSignup($userSignupInputDto: UserSignupInputDto!) {\n  userSignup(userSignupInputDto: $userSignupInputDto) {\n    success\n     message {\n      en\n      ar\n    }\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": "{\n  \"userSignupInputDto\": {\n     \"name\": \"Auto+{{$randomInt}}\",\n\t\t\"countryCode\": \"{{countryCode}}\",\n\t\t\"mobile\": \"{{mobileNo}}\",\n\t\t\"email\": \"{{email}}\",\n\t\t\"deviceId\": \"12344555\",\n\t\t\"deviceType\": \"IOS\",\n\t\t\"osVersion\": \"1.0.1\",\n\t\t\"deviceModel\": \"String\",\n\t\t\"versionCode\": \"String\",\n\t\t\"otp\": \"{{otp}}\",\n\t\t\"deviceARN\": \"String\",\n\t\t\"oneSignalId\": \"String\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Otp [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "db745d7c-5bbd-481e-8c81-5d7919512e1f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Success validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"otp\",jsonData.data.sendOtp.otp);\r",
							"    pm.expect(jsonData.data.sendOtp.success).to.eql(true);\r",
							"\r",
							"    console.log(\"Otp = \", jsonData.data.sendOtp.otp);\r",
							"    console.log(\"countryCode = \", pm.variables.get('countryCode'));\r",
							"    console.log(\"mobileNo = \", pm.variables.get('mobileNo'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "b0b7da9f-8438-4874-9afb-1af155dbba99",
						"exec": [
							"//pm.variables.set(\"countryCode\",\"IND\");\r",
							"//pm.variables.set(\"mobileNo\",\"500012350\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SendOtp($sendOtpInputDto: SendOtpInputDto!){\n  sendOtp(sendOtpInputDto:$sendOtpInputDto) {\n    success\n    message {\n      en\n      ar\n    }\n    otp\n  }\n}",
						"variables": "{\n  \"sendOtpInputDto\": {\n    \"countryCode\": \"{{countryCode}}\",\n    \"mobile\": \"{{mobileNo}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Entity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a50fc8bb-0a73-4e59-80ef-bb1e40f23973",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteEntity($id: String!){\n  deleteEntity(entityId: $id){\n    status\n  }\n}",
						"variables": "{\n  \"id\": \"5f62f194fee6c61ea0ee916f\"\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Entities [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "51b6a833-d96e-4949-b325-c7a1e2141d5a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetAllEntity {\n  getAllEntity {\n    id\n    name {\n      ar\n      en\n    }\n    type\n    withoutDelivery\n    iconUrl {\n      ar\n      en\n    }\n    fullWidthIconUrl {\n      ar\n      en\n    }\n    halfWidthIconUrl {\n      ar\n      en\n    }\n    uiType\n    sortIndex\n    status\n  }\n}",
						"variables": ""
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getStores in UserApp",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4a6ed6f7-d46b-45fc-8342-352243502a03",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStores($storeFindInputDto: StoreFindInputDto!){\n  getStores(storeFindInputDto:$storeFindInputDto) {\n    stores{\n      name\n    }\n    pagination{\n      page\n      hasNextPage\n      hasPrevPage\n      nextPage\n      prevPage\n    }\n  }\n}",
						"variables": "{\n  \"storeFindInputDto\": {\n    \"paginate\": {\n      \"page\": 1,\n      \"recordsPerPage\": 5\n    },\n    \"entityId\": \"5f86c404b2d623678a366cdf\",\n    \"geoHash\": \"tf2fxs4\",\n    \"isAvailable\": true,\n    \"isChefOnline\": true\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8957dc87-2a6f-4ca3-abaa-0d4c6fba7c8f",
						"exec": [
							"/*\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.environment.set(\"addressId\", response.data.getAllAddress[0].id);\r",
							"});\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetAllAddress {\n  getAllAddress {\n    id\n    name\n    address\n    buildingNo\n    imageUrl\n    location {\n      coordinates\n      type\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "de4d40c3-03a0-4f86-b5e4-3d8a227204b9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteAddress.status).to.eql(\"SUCCESS\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation DeleteAddress($input: AddressDeleteInputDto!) {\n  deleteAddress(addressDeleteInput:$input) {\n    status\n  }\n}",
						"variables": "{\n  \"input\": {\n    \"addressId\": \"{{addressId}}\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Profile [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "5a5e3feb-63ac-4905-b98d-5b0ddbd19a90",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"Verify User Profile\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    pm.expect(json.data.getUserProfile.mobile).to.eql(pm.variables.get('mobileNo'));\r",
							"    pm.expect(json.data.getUserProfile.countryCode).to.eql(pm.variables.get('countryCode'));\r",
							"    //pm.expect(json.data.getUserProfile.email).to.eql(pm.environment.get('uEmail'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserProfile{\n  getUserProfile {\n      mobile\n      email\n      name\n    countryCode\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home Business Entity Group List [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca44eabb-96ff-4f7c-8cff-223d800a50d9",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListBusinessGroupEntities  {\n  listBusinessEntityGroups {\n    position\n    viewType\n    height\n    ratio\n    entities {\n      name {\n        ar\n        en\n      }\n    }\n    textDetails {\n      title {\n        ar\n        en\n      }\n      desc {\n        ar\n        en\n      }\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Store Product Listing [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "06a3a61f-06f7-40ae-bfbc-8347116ad3c0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStoreProductsForUser($userStoreProductsFindInputDto: StoreProductFindInputDto!) {\n  getStoreProductsForUser(userStoreProductsFindInputDto: $userStoreProductsFindInputDto) {\n    products {\n      productName\n    }\n    pagination {\n      hasNextPage\n      nextPage\n      \n      hasPrevPage\n      prevPage\n      \n      page\n    }\n  }\n}",
						"variables": "{\n  \"userStoreProductsFindInputDto\": {\n    \"storeId\": \"5f588fc268800866e8c4cf4e\",\n    \"paginate\": {\n      \"page\": 1,\n      \"recordsPerPage\": 10\n    }\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "c238b38e-dc68-4f62-b221-ef06b175cf85",
				"type": "text/javascript",
				"exec": [
					"pm.variables.set(\"countryCode\",\"IND\");",
					"pm.variables.set(\"mobileNo\",\"500012350\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "2ce49005-5722-436f-b456-72d843f53330",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}