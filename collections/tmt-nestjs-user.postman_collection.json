<<<<<<< HEAD
﻿in captain first, After accept waiting for chef confirmation screen not showing, it showing after kill and relaunch - Verified / Failed (Not showing chef confirmation screen for second order need to force close and open the app to see that screen)
when open app after 2nd order received proposal screen not showing, it showing after kill and relaunch - (Use separate phones for user and captain ) - Verified / Working Fine
track your driver showing world map for both 1st and 2nd order - Verified / Not Working
after open 2nd order it does not showing second order in top, its showing 1st restaurant name with back navigation- better change like ios - Fixed
for 2nd order chat showing batch in 1st order chat icon - Verified / Failed
after 2nd order accepted also showing order proposal, if try to accept/reject it does not respond anything - it happens after kill and relaunch once accepted - Verified / Fixed
cs chat showing web page not available does not redirect fresh chat web view - Verified / Fixed
order proposal and waiting for chef confirmation need to change as like 1st order - (Not a Req)
after 2nd order cancelled by chef also showing order screen it removing after came back from 2nd order screen - Verified / Fixed
in 2nd after start journey it does not receive order by order proposal and replace captain, after order placed by user or when replace its just refreshing current order-(3rd order not working) - Backend



Sometimes in second order proposel the accept and reject option is not showing
Probable scenario 
make the second order reject by chef after captain accepted
And place another second order for the captain
In proposel the accept and rreject will won't appear - YR71610181479058

1st order chat badge count disappeared without opening the chat when go to  second order screen and come back
=======
{
	"info": {
		"_postman_id": "98665c23-3e74-4a4d-8e85-58ff5bea17b2",
		"name": "tmt-nestjs-user",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "User Login [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f368c97e-51d8-42ae-b031-b7a1e6290624",
						"exec": [
							"var json = pm.response.json();\r",
							"\r",
							"pm.test(\"Verify User Login\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    console.log(\"Api response = \",json.data.userLogin.success);\r",
							"    //pm.expect(json.data.userLogin.success).to.be.true;\r",
							"    if(json.data.userLogin.success == true) {\r",
							"        pm.environment.set(\"token\",json.data.userLogin.accessToken);\r",
							"        pm.environment.set(\"refreshToken\", json.data.userLogin.refreshToken);\r",
							"    }\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));    \r",
							"});\r",
							"\r",
							"pm.test(\"isSignupRequired true run Signup\", function(){\r",
							"    pm.expect(json.data.userLogin.isSignUpRequired).to.be.true\r",
							"   if((json.data.userLogin.isSignUpRequired) == true)\r",
							"        postman.setNextRequest(\"User Signup\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  UserLogin($userLoginInputDto: UserLoginInputDto!){\n  userLogin(userLoginInputDto: $userLoginInputDto) {\n    success\n     message {\n      en\n      ar\n    }\n    accessToken\n    refreshToken\n    isSignUpRequired\n  }\n}",
						"variables": "{\n  \"userLoginInputDto\": {\n    \"countryCode\": \"{{countryCode}}\",\n    \"mobile\": \"{{mobileNo}}\",\n    \"deviceType\": \"IOS\",\n    \"otp\": \"{{otp}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Entity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "55ff5834-c3d3-4915-9d16-5fc232359ab1",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"Entityid\", response.data.createEntity.id);\r",
							"console.log(response.data.createEntity.id);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateEntity($entityInput: EntityCreateInputDto!) {\n  createEntity(entityInput: $entityInput) {\n    name {\n      ar\n      en\n    }\n    subEntityIds\n    type\n    adminStoreId\n    entityCategories\n    withoutDelivery\n    iconUrl {\n      ar\n      en\n    }\n    fullWidthIconUrl {\n      ar\n      en\n    }\n    halfWidthIconUrl {\n      ar\n      en\n    }\n    uiType\n    sortIndex\n    status\n    dataAPIQuery\n    cityIds\n  }\n}\n",
						"variables": "{\n  \"entityInput\": {\n     \"name\": { \"ar\": \"مطاعم1\", \"en\": \"RESTAURANTS1\" },\n      \"subEntityIds\": [],\n      \"type\": \"RESTAURANT\",\n      \"adminStoreId\": \"5fa94319bdfe015122f09ffc\",\n      \"entityCategories\": [],\n      \"withoutDelivery\": true,\n      \"iconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2d3aab20-2344-11eb-a74a-275df72bee34.png\",\n        \"en\":\"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a0ae5c80-2341-11eb-9b7d-cdb409930e55.png\"},\n      \"fullWidthIconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2e28b4a0-2344-11eb-9b7d-cdb409930e55.png\",\"en\":\"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a1142330-2341-11eb-a74a-275df72bee34.png\"},\n      \"halfWidthIconUrl\": { \"ar\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/2d98f7c0-2344-11eb-a74a-275df72bee34.png\", \"en\": \"https://tmtcategoriesimages.s3.eu-west-1.amazonaws.com/entities/a0eb1760-2341-11eb-9b7d-cdb409930e55.png\" },\n      \"uiType\": 0,\n      \"sortIndex\": 1,\n      \"status\": \"ACTIVE\",\n      \"dataAPIQuery\": \"dataAPIQuery\",\n      \"cityIds\": []\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Access token [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8ea4da92-ffee-4fa7-80df-bde792da58fe",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"New Access Token\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    console.log(\"Api response = \",json.data.refreshToken.success);\r",
							"    pm.expect(json.data.refreshToken.success).to.be.true;\r",
							"    pm.environment.set(\"token\",json.data.refreshToken.accessToken);\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refreshToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation RefreshToken($accessTokenInputDto: BuildAccessTokenInputDto!){\n  refreshToken(accessTokenInputDto:$accessTokenInputDto){\n    accessToken\n  }\n}",
						"variables": "{\n  \"accessTokenInputDto\": {\n    \"accessToken\": \"{{token}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "New Access Token [Rest API]",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refresh-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"accessToken\": \"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1ZjY4NmY1N2Y4N2Q4MjBmOGY0MTU4YzUiLCJzZXNzaW9uSWQiOiI1ZjY4NmY1NzMwZTRkZjEyZmIzNDFhMGUiLCJhcHBUeXBlIjoiVVNFUiIsImRldmljZVR5cGUiOiJJT1MiLCJyb2xlcyI6WyJVU0VSIl0sImlhdCI6MTYwMDY3OTc2NywiZXhwIjoxNjAwNjgwNjY3fQ.MEQCIGof84Lkzj6RsORH7f-gsOhz-S9VN2iapFmmGMjaVfcPAiAQqJeEZ4lah-3FlXBhT8OFpC8BGkZB1cvcmLVvAi5Q4Q\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server}}/tokens/refresh",
					"host": [
						"{{auth-server}}"
					],
					"path": [
						"tokens",
						"refresh"
					]
				}
			},
			"response": []
		},
		{
			"name": "Save Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a531d2c4-ef06-489d-82d1-7ec414b6d705",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"\r",
							"    const variable = pm.response.json();\r",
							"    pm.environment.set(\"addressId\", variable.data.saveAddress.id);\r",
							"});\r",
							"pm.test(\"Response time validation\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation saveAddress($input: AddressInputDto!) {\n  saveAddress(addressInput: $input){\n    id\n    name\n    address\n    buildingNo\n    imageUrl\n    location {\n      coordinates\n      type\n    }\n  }\n}",
						"variables": "{\n  \"input\": {\n    \"name\": \"{{addrName}}\",\n    \"address\": \"first street, chennai\",\n    \"buildingNo\": \"19\",\n    \"imageUrl\": \"http://google.com\",\n    \"location\": {\n      \"coordinates\": [12.96738173,80.15095264],\n      \"type\": \"point\"\n    }\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Signup [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "0ea66c20-ee23-4d18-8849-7651e47a9c74",
						"exec": [
							"var email = \"auto+{{$randomInt}}@tmmt.com\"\r",
							"pm.variables.set(\"email\",email);"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "8dd4ec4d-95c2-4aac-9dfc-f08d8e58dc36",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"Verify User Signup\", function(){\r",
							"    pm.expect(json.data.userSignup.success).to.be.true;\r",
							"    var email = pm.variables.get('email');\r",
							"    console.log(\"User Email, \",email);\r",
							"    pm.environment.set(\"uEmail\",email);\r",
							"\r",
							"    pm.environment.set(\"token\",json.data.userSignup.accessToken);\r",
							"    pm.environment.set(\"refreshToken\", json.data.userSignup.refreshToken);\r",
							"    console.log(\"token = \", pm.environment.get(\"token\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UserSignup($userSignupInputDto: UserSignupInputDto!) {\n  userSignup(userSignupInputDto: $userSignupInputDto) {\n    success\n     message {\n      en\n      ar\n    }\n    accessToken\n    refreshToken\n  }\n}\n",
						"variables": "{\n  \"userSignupInputDto\": {\n     \"name\": \"Auto+{{$randomInt}}\",\n\t\t\"countryCode\": \"{{countryCode}}\",\n\t\t\"mobile\": \"{{mobileNo}}\",\n\t\t\"email\": \"{{email}}\",\n\t\t\"deviceId\": \"12344555\",\n\t\t\"deviceType\": \"IOS\",\n\t\t\"osVersion\": \"1.0.1\",\n\t\t\"deviceModel\": \"String\",\n\t\t\"versionCode\": \"String\",\n\t\t\"otp\": \"{{otp}}\",\n\t\t\"deviceARN\": \"String\",\n\t\t\"oneSignalId\": \"String\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Send Otp [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "155ad012-e3af-48ed-8649-f8a6bc4d3577",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Success validation\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.environment.set(\"otp\",jsonData.data.sendOtp.otp);\r",
							"    pm.expect(jsonData.data.sendOtp.success).to.eql(true);\r",
							"\r",
							"    console.log(\"Otp = \", jsonData.data.sendOtp.otp);\r",
							"    console.log(\"countryCode = \", pm.variables.get('countryCode'));\r",
							"    console.log(\"mobileNo = \", pm.variables.get('mobileNo'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "a18e37ca-6a73-4f44-894d-1ae85f398839",
						"exec": [
							"//pm.variables.set(\"countryCode\",\"IND\");\r",
							"//pm.variables.set(\"mobileNo\",\"500012350\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SendOtp($sendOtpInputDto: SendOtpInputDto!){\n  sendOtp(sendOtpInputDto:$sendOtpInputDto) {\n    success\n    message {\n      en\n      ar\n    }\n    otp\n  }\n}",
						"variables": "{\n  \"sendOtpInputDto\": {\n    \"countryCode\": \"{{countryCode}}\",\n    \"mobile\": \"{{mobileNo}}\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Entity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "823e221d-3c5d-4e09-ad90-52f8a1c4eca7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteEntity($id: String!){\n  deleteEntity(entityId: $id){\n    status\n  }\n}",
						"variables": "{\n  \"id\": \"5f62f194fee6c61ea0ee916f\"\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Entities [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "244a46e0-d1fa-49a3-bd31-ab14afecad85",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetAllEntity {\n  getAllEntity {\n    id\n    name {\n      ar\n      en\n    }\n    type\n    withoutDelivery\n    iconUrl {\n      ar\n      en\n    }\n    fullWidthIconUrl {\n      ar\n      en\n    }\n    halfWidthIconUrl {\n      ar\n      en\n    }\n    uiType\n    sortIndex\n    status\n  }\n}",
						"variables": ""
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "getStores in UserApp",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3110247-5312-48ce-a023-e5d608d4e9cf",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStores($storeFindInputDto: StoreFindInputDto!){\n  getStores(storeFindInputDto:$storeFindInputDto) {\n    stores{\n      name\n    }\n    pagination{\n      page\n      hasNextPage\n      hasPrevPage\n      nextPage\n      prevPage\n    }\n  }\n}",
						"variables": "{\n  \"storeFindInputDto\": {\n    \"paginate\": {\n      \"page\": 1,\n      \"perPage\": 5\n    },\n    \"entityId\": \"5f86c404b2d623678a366cdf\",\n    \"geoHash\": \"tf2fxs4\",\n    \"isAvailable\": true,\n    \"isChefOnline\": true\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a976a579-b167-4383-bfb5-2749838fccea",
						"exec": [
							"/*\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.environment.set(\"addressId\", response.data.getAllAddress[0].id);\r",
							"});\r",
							"*/\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetAllAddress {\n  getAllAddress {\n    id\n    name\n    address\n    buildingNo\n    imageUrl\n    location {\n      coordinates\n      type\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Address [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6d460aa-c2a7-41cd-983c-39566adad332",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteAddress.status).to.eql(\"SUCCESS\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation DeleteAddress($input: AddressDeleteInputDto!) {\n  deleteAddress(addressDeleteInput:$input) {\n    status\n  }\n}",
						"variables": "{\n  \"input\": {\n    \"addressId\": \"{{addressId}}\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "User Profile [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8895e69d-71ee-454a-8fb1-8bcf58958516",
						"exec": [
							"var json = pm.response.json();\r",
							"pm.test(\"Verify User Profile\",function(){\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"    pm.expect(json.data.getUserProfile.mobile).to.eql(pm.variables.get('mobileNo'));\r",
							"    pm.expect(json.data.getUserProfile.countryCode).to.eql(pm.variables.get('countryCode'));\r",
							"    //pm.expect(json.data.getUserProfile.email).to.eql(pm.environment.get('uEmail'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetUserProfile{\n  getUserProfile {\n      mobile\n      email\n      name\n    countryCode\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Home Business Entity Group List [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "af4a5f17-8cad-4c75-a869-7c0f1ae50d2e",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query ListBusinessGroupEntities  {\n  listBusinessEntityGroups {\n    position\n    viewType\n    height\n    ratio\n    entities {\n      name {\n        ar\n        en\n      }\n    }\n    textDetails {\n      title {\n        ar\n        en\n      }\n      desc {\n        ar\n        en\n      }\n    }\n  }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Store Product Listing [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c3af45ed-f204-4130-885c-d4b7a79a2d7f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStoreProductsForUser($userStoreProductsFindInputDto: StoreProductFindInputDto!) {\n  getStoreProductsForUser(userStoreProductsFindInputDto: $userStoreProductsFindInputDto) {\n    products {\n      productName\n    }\n    pagination {\n      hasNextPage\n      nextPage\n      \n      hasPrevPage\n      prevPage\n      \n      page\n    }\n  }\n}",
						"variables": "{\n  \"userStoreProductsFindInputDto\": {\n    \"storeId\": \"5f588fc268800866e8c4cf4e\",\n    \"paginate\": {\n      \"page\": 1,\n      \"perPage\": 10\n    }\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product to cart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddProductToCart($addProductInput:AddProductInput!) {\n    addProductToCart(addProductInput:$addProductInput){\n    totalPrice\n    totalQuotedPrice\n    productId\n  }\n}\n",
						"variables": "{\n    \"addProductInput\": {\n        \"entityId\": \"5fc4ab4b64fefb415688149d\",\n        \"storeCode\": \"123\",\n        \"product\": {\n            \"productId\": \"5fc4bbc264fefb41568814a9\",\n            \"quotedPrice\": 200,\n            \"name\": {\n                \"en\": \"Final testing\",\n                \"ar\": \"Final testing\"\n            },\n            \"quantity\": 2,\n            \"price\": 100,\n            \"message\": \"will buy\"\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Cart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetCart($entityId: String!) {\n    getCart(entityId: $entityId)   { \n    _id\n    entityId\n    storeCode\n  }\n}\n",
						"variables": "{\n    \"entityId\": \"5fc4ab4b64fefb415688149d\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ApplyPromoCode",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation ApplyPromoCode($promoCodeInput: PromoCodeInput!){\napplyPromoCode(promoCodeInput: $promoCodeInput) { \n    id\n    promoCode\n    expiresAt\n  }\n}\n",
						"variables": "{\n    \"promoCodeInput\": {\n        \"cartId\": \"5fc4bcd564fefb41568814ac\",\n        \"promoCode\": \"happy friday\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "RemoveProductFromCart",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation \n  RemoveProductFromCart($removeInput:RemoveCartProductInput!) {\n      removeProductFromCart(removeInput:$removeInput){\n        totalPrice\n        totalQuotedPrice\n  }\n}\n",
						"variables": "{\n    \"removeInput\": {\n        \"entityId\": \"5fc4ab4b64fefb415688149d\",\n        \"productId\": \"5fc4bbc264fefb41568814a9\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateCartMessage",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateCartMessage($messageInput: UpdateCartMessageInput!) {\n    updateCartMessage(messageInput: $messageInput) {\n    status\n  }\n}\n",
						"variables": "{\n    \"messageInput\": {\n    \"cartId\": \"5fc4bcd564fefb41568814ac\",\n    \"message\": \"msg updated\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "414cb0ee-8958-403a-8944-0875368de542",
				"type": "text/javascript",
				"exec": [
					"pm.variables.set(\"countryCode\",\"IND\");",
					"pm.variables.set(\"mobileNo\",\"500012350\");"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "4053e988-fecb-4c7b-99d8-85419c734d14",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}
>>>>>>> 548c5e1544e19c007a0943403a26fe3964df2724
