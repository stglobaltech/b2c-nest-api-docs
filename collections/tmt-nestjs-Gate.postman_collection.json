{
	"info": {
		"_postman_id": "eec3da5a-a2c5-4097-ac3d-3630fef4bfcd",
		"name": "tmt-nestjs-Gate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Gate-Login [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "635c921c-5603-4074-8d65-11827664678f",
						"exec": [
							"const response = pm.response.json();\r",
							"console.log(response.data.gateLogin.accessToken);\r",
							"pm.environment.set(\"access-Token\", response.data.gateLogin.accessToken);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.gateLogin.success).to.eql(true);\r",
							"});\r",
							"const ownerId = pm.response.json();\r",
							"pm.environment.set(\"userId\", ownerId.data.gateLogin.userId);\r",
							"//postman.setNextRequest(\"Get Store\");\r",
							"//pm.environment.unset(\"auth-server-gql\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateLogin($gateLoginDto: GateLoginDto!) {\n  gateLogin(gateLoginDto: $gateLoginDto) {\n    success\n    accessToken\n    refreshToken\n    userId\n    }\n}",
						"variables": "{\n  \"gateLoginDto\": {\n    \"email\": \"gamegame123@tmmt.sa\",\n    \"password\": \"Samdhiva@12\",\n    \"appType\": \"GATE\",\n    \"deviceType\": \"WEB\"\n  }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gate-Signup [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d5fadf4-cfe7-4926-9f25-3a57138a83c0",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    console.log(response.data.gateSignup.message);\r",
							"    pm.expect(response.data.gateSignup.success).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateSignup($gateSignUpDto: GateSignUpDto!){\n  gateSignup(gateSignUpDto:$gateSignUpDto) {\n    success\n    message\n    accessToken\n    refreshToken\n    userId\n  }\n}",
						"variables": "{\n    \"gateSignUpDto\": {\n        \"username\": \"game04\",\n        \"email\": \"gamegame0404@tmmt.sa\",\n        \"password\": \"Samdhiva@12\",\n        \"appType\": \"GATE\",\n        \"deviceType\": \"WEB\",\n        \"mobileNumber\": \"7807807\",\n        \"iBan\": \"1234567\",\n        \"restuarantNameEn\": \"GameRestaurent\"\n    }\n}\n"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Categories [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a5984135-6c8b-4181-9994-0d05c1f8ff8a",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"//pm.environment.set(\"catId\", response.data.getCategories[0].productCategories[0]._id);\r",
							"//console.log(response.data.getCategories[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getCategories($storeId: String!){\n    getCategories(storeId:$storeId){\n       productCategories{\n           categoryName\n           arCategoryName\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"storeId\":\"{{id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3d7cf0a0-15a2-4d6a-ba67-2560704cd9f5",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Created Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateCategory($categoryCreateInput: CategoryCreateInputDto!) {\n  createCategory(categoryCreateInput: $categoryCreateInput) {\n    status\n    message\n  }\n}\n",
						"variables": "{\n  \"categoryCreateInput\":  {\n    \"storeId\": \"{{id}}\",\n    \"categoryName\": \"Cake123\",\n    \"arCategoryName\": \"ArCategory1\",\n    \"isEnable\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6830e700-b471-4105-b31b-f37373cb46e6",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"catId\", response.data.searchCategory[0].productCategories[0]._id);\r",
							"console.log(response.data.searchCategory[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchCategory($categorySearchInput:CategorySearchInputDto!){\n    searchCategory(categorySearchInput:$categorySearchInput){\n        productCategories {\n            categoryName\n            arCategoryName\n            isEnable\n            _id\n        }\n    }\n}",
						"variables": "{\n    \"categorySearchInput\":{\n        \"storeId\":\"{{id}}\",\n        \"categoryKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8d6d7c70-f61b-460e-9104-373b4939728c",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Edited Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Enable Product category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation EditCategory($categoryEditInput:CategoryEditInputDto!){\n    editCategory(categoryEditInput:$categoryEditInput){\n       status\n       message\n    }\n}",
						"variables": "{\n    \"categoryEditInput\":{\n        \"storeId\": \"{{id}}\",\n        \"_id\":\"{{catId}}\",\n        \"categoryName\":\"dhoni123\",\n        \"arCategoryName\":\"ijinj\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "943af90a-29d9-4bb0-8403-aaebfc16f9e7",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Create Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateCategoryIsEnable($categoryIsEnableEditInput: CategoryIsEnableEditInputDto!){\n    updateCategoryIsEnable(categoryIsEnableEditInput:$categoryIsEnableEditInput){\n       productCategories{\n           categoryName\n           arCategoryName\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"categoryIsEnableEditInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"isEnable\":true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "571cf756-3eca-41cd-9075-10979951c8ed",
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"Productid\", response.data.createProduct._id);\r",
							"console.log(response.data.createProduct._id);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  createProduct($productCreateInput:ProductCreateInputDto!){\n    createProduct(productCreateInput:$productCreateInput){\n    _id\n    productName\n    arProductName\n    description\n    arDescription\n    maxQuantity\n    price\n    payType\n    picture\n    isAvailable\n    }\n}",
						"variables": "{\n    \"productCreateInput\":{\n        \"productName\":\"LIon king\",\n        \"arProductName\":\"Lion king\",\n        \"description\":\"will be nice\",\n        \"arDescription\":\"will be nice\",\n        \"price\":20,\n        \"maxQuantity\":23,\n        \"payType\":\"any\",\n        \"picture\":\"asas\",\n        \"isAvailable\":true,\n        \"categoryIds\":\"{{catId}}\",\n        \"storeCode\":\"1212\",\n        \"ownerId\":\"{{userId}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1a8453b0-7cb3-47f3-890e-0bc89564d3ff",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Product Edited Successfully\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.editProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Quantity\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  EditProduct($productEditInput:ProductEditInputDto!){\n    editProduct(productEditInput:$productEditInput){\n       status\n       message\n    }\n}",
						"variables": "{\n    \"productEditInput\":{\n        \"_id\":\"{{Productid}}\",\n        \"productName\":\"ed\",\n        \"arProductName\":\"ola\",\n        \"description\":\"asas\",\n        \"arDescription\":\"asas\",\n        \"price\":0,\n        \"maxQuantity\":1,\n        \"payType\":\"any\",\n        \"categoryIds\":\"{{catId}}\",\n        \"picture\":\"asas\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "097c8a94-ec04-49c7-b14a-7aac5626a634",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProduct($productId: String!) {\n   getProduct(productId:$productId) {\n       productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n   }\n}",
						"variables": "{\n    \"productId\":\"{{Productid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "98041a90-c41d-4b04-af8d-6f39d7d28086",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Catgeory Deleted Successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteCategory($categoryDeleteInput: CategoryDeleteInputDto!){\n    deleteCategory(categoryDeleteInput:$categoryDeleteInput){\n        status \n        message\n    }\n}",
						"variables": "{\n    \"categoryDeleteInput\":{\n        \"categoryId\":\"5f7ac2772bf16e5989802e7f\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Based on Category [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "36516803-8b77-4c8e-84b1-bda7d7eb55fd",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "fc137411-cfc5-4f4d-944d-51b406a75414",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnCategory($categoryId:String!) {\n    getProductsBasedOnCategory(categoryId:$categoryId) {\n        _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"categoryId\":\"{{catId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4f2fa492-c95c-406a-b735-94df68ff3a52",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Get Product Based on Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchProduct($productSearchInput:ProductSearchInputDto!){\n    searchProduct(productSearchInput:$productSearchInput){\n         _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"productSearchInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Quantity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6031fcfc-7eee-479f-9158-47420b8414db",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Price\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductQuantity($productQuantityEditInput:ProductQuantityEditInputDto!){\nupdateProductQuantity(productQuantityEditInput:$productQuantityEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productQuantityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"maxQuantity\":12\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Price [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca22a938-e6f4-49dd-9638-ad1da3eebbbf",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Availability\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductPrice($productPriceEditInput:ProductPriceEditInputDto!){\nupdateProductPrice(productPriceEditInput:$productPriceEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productPriceEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"price\":0\n        \n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Availablility [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "19a969b0-81b9-4353-b117-91f5f6d6cf89",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductAvailability($productAvailabilityEditInput:ProductAvailabilityEditInputDto!){\nupdateProductAvailability(productAvailabilityEditInput:$productAvailabilityEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productAvailabilityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"isAvailable\":false\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e10ba31b-5d42-43f6-bed1-1bd1e2742e27",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.deleteProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProduct($productId:String!){\n    deleteProduct(productId:$productId){\n        status\n        message\n    }\n}",
						"variables": "{\n    \"productId\":\"{{Productid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Image Upload [REST]",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{main-server}}/api/product/image-upload",
					"host": [
						"{{main-server}}"
					],
					"path": [
						"api",
						"product",
						"image-upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "434f519f-a72a-41a1-b23a-efebe3387ad7",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "32f90685-a674-4285-8ba4-d59bef831389",
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"id\", response.data.getStore._id);\r",
							"console.log(response.data.getStore._id);\r",
							"//postman.setNextRequest(\"Create Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStore($ownerId: String!) {\n  getStore(ownerId: $ownerId) {\n    _id\n    name\n    ownerId\n  }\n}\n",
						"variables": "{\n  \"ownerId\": \"{{userId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Store Configuration",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  editStoreConfiguration($storeEditInput:StoreConfigurationEditInputDto!){\n   editStoreConfiguration(storeEditInput:$storeEditInput){\n     _id\n     branchCode\n     displayName\n     categoryIds\n    }\n}",
						"variables": "{\n    \"storeEditInput\":{\n        \"_id\":\"5f3bee2d66a6530db2e5a4c3\",\n        \"branchCode\":\"16\",\n        \"displayName\":\"nes\",\n        \"storeCategoryIds\":[\"5eeb0e67a3d90731a5ae2011\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnStore($storeId:String!) {\n    getProductsBasedOnStore(storeId:$storeId) {\n        _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"storeId\":\"5f3bee2d66a6530db2e5a4c3\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query searchProductBasedOnStore($storeProductSearchInputDto:StoreProductSearchInputDto!){\n    searchProductBasedOnStore(storeProductSearchInputDto:$storeProductSearchInputDto){\n         _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"storeProductSearchInputDto\":{\n        \"storeId\":\"5f3bee2d66a6530db2e5a4c3\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}