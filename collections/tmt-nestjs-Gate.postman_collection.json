{
	"info": {
		"_postman_id": "44faff0b-02b5-4264-b493-6712b385b5cf",
		"name": "tmt-nestjs-Gate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Delete Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e2877fb7-ae5f-4e0e-92d9-95b15d8a03d4",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Catgeory Deleted Successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteCategory($categoryDeleteInput: CategoryDeleteInputDto!){\n    deleteCategory(categoryDeleteInput:$categoryDeleteInput){\n        status \n        message\n    }\n}",
						"variables": "{\n    \"categoryDeleteInput\":{\n        \"categoryId\":\"5f7ac2772bf16e5989802e7f\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fd10b3ba-5fb8-4bc9-b764-7aa7d40f6b82",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Edited Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Enable Product category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation EditCategory($categoryEditInput:CategoryEditInputDto!){\n    editCategory(categoryEditInput:$categoryEditInput){\n       status\n       message\n    }\n}",
						"variables": "{\n    \"categoryEditInput\":{\n        \"storeId\": \"{{id}}\",\n        \"_id\":\"{{catId}}\",\n        \"categoryName\":\"dhoni123\",\n        \"arCategoryName\":\"ijinj\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f465c6bf-2eaa-45ac-9437-d8d01a8a080c",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"catId\", response.data.searchCategory[0].productCategories[0]._id);\r",
							"console.log(response.data.searchCategory[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchCategory($categorySearchInput:CategorySearchInputDto!){\n    searchCategory(categorySearchInput:$categorySearchInput){\n        productCategories {\n            categoryName\n            arCategoryName\n            isEnable\n            _id\n        }\n    }\n}",
						"variables": "{\n    \"categorySearchInput\":{\n        \"storeId\":\"{{id}}\",\n        \"categoryKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Categories [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a732f82a-6c7d-4859-807b-b2d9abc2bc1f",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"//pm.environment.set(\"catId\", response.data.getCategories[0].productCategories[0]._id);\r",
							"//console.log(response.data.getCategories[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getCategories($storeId: String!){\n    getCategories(storeId:$storeId){\n       productCategories{\n           categoryName\n           arCategoryName\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"storeId\":\"{{id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{gql-main-server}}",
					"host": [
						"{{gql-main-server}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "bce9f3f0-b848-4270-824d-dccd6986b698",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Product Edited Successfully\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.editProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Quantity\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  EditProduct($productEditInput:ProductEditInputDto!){\n    editProduct(productEditInput:$productEditInput){\n       status\n       message\n    }\n}",
						"variables": "{\n    \"productEditInput\":{\n        \"_id\":\"{{Productid}}\",\n        \"productName\":\"ed\",\n        \"arProductName\":\"ola\",\n        \"description\":\"asas\",\n        \"arDescription\":\"asas\",\n        \"price\":0,\n        \"maxQuantity\":1,\n        \"payType\":\"any\",\n        \"categoryIds\":\"{{catId}}\",\n        \"picture\":\"asas\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store Categories",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStoreCategories{\n    getStoreCategories{\n         _id\n        name\n        arName\n       iconUrl\n    }\n}",
						"variables": ""
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Based on Category [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8405cae5-0eb6-4e6f-99bf-e1e42bbc0bc1",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "0d61260b-4afe-4857-985a-700ddf06a8af",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnCategory($categoryId:String!) {\n    getProductsBasedOnCategory(categoryId:$categoryId) {\n        _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"categoryId\":\"{{catId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "654a8c66-ed16-44ea-95e3-f60b6f2f6e16",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Create Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateCategoryIsEnable($categoryIsEnableEditInput: CategoryIsEnableEditInputDto!){\n    updateCategoryIsEnable(categoryIsEnableEditInput:$categoryIsEnableEditInput){\n       productCategories{\n           categoryName\n           arCategoryName\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"categoryIsEnableEditInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"isEnable\":true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update entity key in store",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f9aa198c-61b5-49f7-a03f-914b22113a73",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editStoreEntity.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"entity updated  Successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editStoreEntity($storeEntityEditInput:StoreEntityEditInputDto!) {\n  editStoreEntity(storeEntityEditInput: $storeEntityEditInput) {\n  status\n  message\n    }\n}",
						"variables": "{\n  \"storeEntityEditInput\": {\n    \"storeId\": \"{{id}}\", \n    \"entityIds\":[\"5f86c4ffb2d623678a366ce0\"]\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "12e5bca2-d63c-413a-9284-96b6342b5511",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.deleteProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProduct($productId:String!){\n    deleteProduct(productId:$productId){\n        status\n        message\n    }\n}",
						"variables": "{\n    \"productId\":\"{{Productid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gate-Login [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "558a0867-957a-40c2-9128-daf20427a70e",
						"exec": [
							"const response = pm.response.json();\r",
							"console.log(response.data.gateLogin.accessToken);\r",
							"pm.environment.set(\"access-Token\", response.data.gateLogin.accessToken);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.gateLogin.success).to.eql(true);\r",
							"});\r",
							"const ownerId = pm.response.json();\r",
							"pm.environment.set(\"userId\", ownerId.data.gateLogin.userId);\r",
							"//postman.setNextRequest(\"Get Store\");\r",
							"//pm.environment.unset(\"auth-server-gql\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateLogin($gateLoginDto: GateLoginDto!) {\n  gateLogin(gateLoginDto: $gateLoginDto) {\n    success\n    accessToken\n    refreshToken\n    userId\n    }\n}",
						"variables": "{\n  \"gateLoginDto\": {\n    \"email\": \"{{emailid}}\",\n    \"password\": \"Samdhiva@12\",\n    \"appType\": \"GATE\",\n    \"deviceType\": \"WEB\"\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d3a42bbc-46a9-4c52-9e85-e7998c5b5600",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Get Product Based on Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchProduct($productSearchInput:ProductSearchInputDto!){\n    searchProduct(productSearchInput:$productSearchInput){\n         _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"productSearchInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gate-Signup [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d79ab857-3f11-46d0-b348-78e05c994011",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    console.log(response.data.gateSignup.message);\r",
							"    pm.expect(response.data.gateSignup.success).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "af94f95c-92ba-417e-a18e-706444d4581c",
						"exec": [
							"let str = '';\r",
							"const key = 'abcdefgh1234567';\r",
							"const domain = '@tmmt.com';\r",
							"for(let i=0; i<=10; i++){\r",
							"str += key.charAt(Math.round(key.length*Math.random())); \r",
							"}\r",
							"const email = str+=domain;\r",
							"pm.environment.set(\"emailid\", email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateSignup($gateSignUpDto: GateSignUpDto!){\n  gateSignup(gateSignUpDto:$gateSignUpDto) {\n    success\n    message\n    accessToken\n    refreshToken\n    userId\n  }\n}",
						"variables": "{\n    \"gateSignUpDto\": {\n        \"username\": \"game04\",\n        \"email\": \"{{emailid}}\",\n        \"password\": \"Samdhiva@12\",\n        \"appType\": \"GATE\",\n        \"countryCode\": \"IND\",\n        \"deviceType\": \"WEB\",\n        \"mobileNumber\": \"7807807\",\n        \"iBan\": \"1234567\",\n        \"restuarantNameEn\": \"GameRestaurent\"\n    }\n}\n"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Image Upload [REST]",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{main-server}}/api/product/image-upload",
					"host": [
						"{{main-server}}"
					],
					"path": [
						"api",
						"product",
						"image-upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "4ec15b08-23e6-49c4-b38e-c138725ff834",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Created Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateCategory($categoryCreateInput: CategoryCreateInputDto!) {\n  createCategory(categoryCreateInput: $categoryCreateInput) {\n    status\n    message\n  }\n}\n",
						"variables": "{\n  \"categoryCreateInput\":  {\n    \"storeId\": \"{{id}}\",\n    \"categoryName\": \"Cake123\",\n    \"arCategoryName\": \"ArCategory1\",\n    \"isEnable\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query searchProductBasedOnStore($storeProductSearchInputDto:StoreProductSearchInputDto!){\n    searchProductBasedOnStore(storeProductSearchInputDto:$storeProductSearchInputDto){\n         _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n    }\n}",
						"variables": "{\n    \"storeProductSearchInputDto\":{\n        \"storeId\":\"5f3bee2d66a6530db2e5a4c3\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "640000d1-8d3d-4136-87b4-c11698160315",
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"Productid\", response.data.createProduct._id);\r",
							"console.log(response.data.createProduct._id);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  createProduct($productCreateInput:ProductCreateInputDto!){\n    createProduct(productCreateInput:$productCreateInput){\n    _id\n    productName\n    arProductName\n    description\n    arDescription\n    maxQuantity\n    price\n    payType\n    picture\n    isAvailable\n    }\n}",
						"variables": "{\n    \"productCreateInput\":{\n        \"productName\":\"Final testing\",\n        \"arProductName\":\"Final Testing\",\n        \"description\":\"will be nice\",\n        \"arDescription\":\"will be nice\",\n        \"price\":20,\n        \"maxQuantity\":23,\n        \"payType\":\"any\",\n        \"picture\":\"asas\",\n        \"isAvailable\":true,\n        \"categoryIds\":\"{{catId}}\",\n        \"storeCode\":\"{{id}}\",\n        \"ownerId\":\"{{userId}}\"\n    }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Price [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "59c2b473-aedd-41d7-a969-8dfd029616eb",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Availability\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductPrice($productPriceEditInput:ProductPriceEditInputDto!){\nupdateProductPrice(productPriceEditInput:$productPriceEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productPriceEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"price\":0\n        \n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "44565456-68a1-475a-8853-e67a9f741fbe",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "97690de0-cf3d-46ad-81d6-512b457e6837",
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"id\", response.data.getStore._id);\r",
							"console.log(response.data.getStore._id);\r",
							"//postman.setNextRequest(\"Create Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStore($ownerId: String!) {\n  getStore(ownerId: $ownerId) {\n    _id\n    name\n    ownerId\n  }\n}\n",
						"variables": "{\n  \"ownerId\": \"{{userId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Availablility [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7f92268f-939e-449a-aee3-ddc3ca7ec4ac",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductAvailability($productAvailabilityEditInput:ProductAvailabilityEditInputDto!){\nupdateProductAvailability(productAvailabilityEditInput:$productAvailabilityEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productAvailabilityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"isAvailable\":false\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "fac629f4-061b-4907-b69f-39afe6fd9102",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProduct($productId: String!) {\n   getProduct(productId:$productId) {\n       productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n   }\n}",
						"variables": "{\n    \"productId\":\"{{Productid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Store Configuration",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  editStoreConfiguration($storeEditInput:StoreConfigurationEditInputDto!){\n   editStoreConfiguration(storeEditInput:$storeEditInput){\n     _id\n     branchCode\n     displayName\n     categoryIds\n    }\n}",
						"variables": "{\n    \"storeEditInput\":{\n        \"_id\":\"{{id}}\",\n        \"branchCode\":\"16\",\n        \"displayName\":\"nes\",\n        \"storeCategoryIds\":[\"5f5735b5f044f836dac05a58\"]\n    }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Quantity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "b58f3bcb-4cce-4b1f-a4ce-af2855d16905",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Price\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductQuantity($productQuantityEditInput:ProductQuantityEditInputDto!){\nupdateProductQuantity(productQuantityEditInput:$productQuantityEditInput){\n      _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n}\n}",
						"variables": "{\n    \"productQuantityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"maxQuantity\":12\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get stores using different multiple variable in GateApp`",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "91870748-f9cf-4376-9e79-ac1443df3649",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStores($storeFindInputDto: StoreFindInputDto!){\n  getStores(storeFindInputDto:$storeFindInputDto) {\n    stores{\n      name\n    }\n    pagination{\n      page\n      hasNextPage\n      hasPrevPage\n      nextPage\n      prevPage\n    }\n  }\n}",
						"variables": "{\n  \"storeFindInputDto\": {\n    \"paginate\": {\n      \"page\": 1,\n      \"perPage\": 2\n    },\n    \"entityId\": \"5f86c404b2d623678a366cdf\",\n    \"geoHash\": \"tf2czbs\",\n    \"isAvailable\": true,\n    \"isChefOnline\": true\n  }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update store availability",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "279d3203-973e-4be8-86a5-e4ee8f3b3c56",
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateStoreAvailability($storeAvailabilityEditInput: StoreAvailabilityEditInputDto!) {\n  updateStoreAvailability(storeAvailabilityEditInput: $storeAvailabilityEditInput) {\n  _id\n    }\n}",
						"variables": "{\n    \"storeAvailabilityEditInput\":{\n    \"storeId\": \"{{id}}\",\n    \"isAvailable\": true\n}\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnStore($ storeProductFindInputDto: StoreProductFindInputDto!) {\n    getProductsBasedOnStore( storeProductFindInputDto:$ storeProductFindInputDto) {\n      products{\n            _id\n        productName\n       arProductName\n       description\n       arDescription\n       price\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n      }\n    }\n}",
						"variables": "{\n\"storeProductFindInputDto\":{\n    \"storeId\":\"{{id}}\",\n    \"paginate\":{\n        \"page\":1,\n        \"perPage\":10\n    }\n}\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Store Contact Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "6b5d24cd-508b-4d9e-b662-cf11cd98e9d5",
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editStoreContactAddress.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Store contact address updated\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  editStoreContactAddress($storeEditInput:StoreContactAddressEditInputDto!){\n  editStoreContactAddress(storeEditInput:$storeEditInput){\n       status\n       message\n    }\n}",
						"variables": "{\n    \"storeEditInput\":{\n        \"_id\":\"{{id}}\",\n        \"coordinates\":[12.1212,99.1212],\n        \"address\":\"3324\",\n        \"contactNumber\":\"9876543226\",\n        \"countryCode\":\"IND\"\n    }\n}"
					},
					"options": {
						"graphql": {}
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}