{
	"info": {
		"_postman_id": "803409f5-b159-4461-b0fb-7fd854d704ec",
		"name": "tmt-nestjs-Gate",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Delete Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.deleteCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Catgeory Deleted Successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteCategory($categoryDeleteInput: CategoryDeleteInputDto!){\n    deleteCategory(categoryDeleteInput:$categoryDeleteInput){\n        success\n        message{\n            en\n            ar\n        }\n    }\n}",
						"variables": "{\n    \"categoryDeleteInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Edited Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Enable Product category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation EditCategory($categoryEditInput:CategoryEditInputDto!){\n    editCategory(categoryEditInput:$categoryEditInput){\n       success\n       message{\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"categoryEditInput\": {\n        \"storeId\": \"{{id}}\",\n        \"_id\": \"{{catId}}\",\n        \"name\": {\n            \"en\": \"dhoni123\",\n            \"ar\": \"ijinj\"\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.environment.set(\"catId\", response.data.searchCategory[0].productCategories[0]._id);\r",
							"console.log(response.data.searchCategory[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchCategory($categorySearchInput:CategorySearchInputDto!){\n    searchCategory(categorySearchInput:$categorySearchInput){\n        productCategories {\n            name{\n                en\n                ar\n            }\n            isEnable\n            _id\n        }\n    }\n}",
						"variables": "{\n    \"categorySearchInput\":{\n        \"storeId\":\"{{id}}\",\n        \"categoryKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Categories [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"//pm.environment.set(\"catId\", response.data.getCategories[0].productCategories[0]._id);\r",
							"//console.log(response.data.getCategories[0].productCategories[0].id);\r",
							"//postman.setNextRequest(\"Edit Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getCategories($storeId: String!){\n    getCategories(storeId:$storeId){\n       productCategories{\n           name{\n               en\n               ar\n           }\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"storeId\":\"{{id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Product Edited Successfully\");\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.editProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Quantity\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  EditProduct($productEditInput:ProductEditInputDto!){\n    editProduct(productEditInput:$productEditInput){\n       success\n       message{\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"productEditInput\":{\n        \"_id\":\"{{Productid}}\",\n        \"productName\":{\"en\":\"ed\",\n        \"ar\":\"ola\"},\n        \"description\":{\"en\":\"asas\",\n        \"ar\":\"asas\"},\n        \"price\":{\"price\":0},\n        \"maxQuantity\":1,\n        \"payType\":\"any\",\n        \"categoryIds\":\"{{catId}}\",\n        \"picture\":\"asas\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store Categories",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStoreCategories{\n    getStoreCategories{\n         _id\n        name{\n            en\n            ar\n        }\n       iconUrl\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Product Based on Category [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnCategory($productFindInput:ProductFindInputDto!) {\n    getProductsBasedOnCategory(productFindInput:$productFindInput) {\n        _id\n        productName{\n            en\n            ar\n        }\n       description{\n           en\n           ar\n       }\n       price{\n           price\n       }\n       payType\n       maxQuantity\n       categoryIds\n       storeCodes\n       isAvailable\n    }\n}",
						"variables": "{\n    \"productFindInput\":{\n    \"categoryId\":\"{{catId}}\",\n    \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Enable Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Create Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateCategoryIsEnable($categoryIsEnableEditInput: CategoryIsEnableEditInputDto!){\n    updateCategoryIsEnable(categoryIsEnableEditInput:$categoryIsEnableEditInput){\n       productCategories{\n           name{\n               en \n               ar\n           }\n           isEnable\n           _id\n       }\n    }\n}",
						"variables": "{\n    \"categoryIsEnableEditInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"isEnable\":true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update entity key in store",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editStoreEntity.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"entity updated  Successfully\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editStoreEntity($storeEntityEditInput:StoreEntityEditInputDto!) {\n  editStoreEntity(storeEntityEditInput: $storeEntityEditInput) {\n  success\n  message{\n      en \n      ar\n  }\n    }\n}",
						"variables": "{\n  \"storeEntityEditInput\": {\n    \"storeId\": \"{{id}}\", \n    \"entityIds\":[\"5f86c4ffb2d623678a366ce0\"]\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    pm.expect(response.data.deleteProduct.status).to.eql(true);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProduct($productDeleteInput:ProductDeleteInputDto!){\n    deleteProduct(productDeleteInput:$productDeleteInput){\n        success\n        message{\n            en\n            ar\n        }\n    }\n}",
						"variables": "{\n    \"productDeleteInput\":{\n    \"productId\":\"{{Productid}}\",\n    \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gate-Login [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"console.log(response.data.gateLogin.accessToken);\r",
							"pm.environment.set(\"access-Token\", response.data.gateLogin.accessToken);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Success message\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.gateLogin.success).to.eql(true);\r",
							"});\r",
							"const ownerId = pm.response.json();\r",
							"pm.environment.set(\"userId\", ownerId.data.gateLogin.userId);\r",
							"//postman.setNextRequest(\"Get Store\");\r",
							"//pm.environment.unset(\"auth-server-gql\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateLogin($gateLoginDto: GateLoginDto!) {\n  gateLogin(gateLoginDto: $gateLoginDto) {\n    success\n    accessToken\n    refreshToken\n    userId\n    }\n}",
						"variables": "{\n  \"gateLoginDto\": {\n    \"email\": \"{{emailid}}\",\n    \"password\": \"Samdhiva@12\",\n    \"deviceType\": \"WEB\"\n  }\n}"
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Get Product Based on Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query SearchProduct($productSearchInput:ProductSearchInputDto!){\n    searchProduct(productSearchInput:$productSearchInput){\n         _id\n        productName{\n            en\n            ar\n        }\n       description{\n           en\n           ar\n       }\n       price{\n           price\n       }\n       payType\n       maxQuantity\n       categoryIds\n       storeCodes\n       isAvailable\n    }\n}",
						"variables": "{\n    \"productSearchInput\":{\n        \"categoryId\":\"{{catId}}\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Gate-Signup [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Your test name\", function () {\r",
							"    var response = pm.response.json();\r",
							"    console.log(response.data.gateSignup.message);\r",
							"    pm.expect(response.data.gateSignup.success).to.eql(true);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let str = '';\r",
							"const key = 'abcdefgh1234567';\r",
							"const domain = '@tmmt.com';\r",
							"for(let i=0; i<=10; i++){\r",
							"str += key.charAt(Math.round(key.length*Math.random())); \r",
							"}\r",
							"const email = str+=domain;\r",
							"pm.environment.set(\"emailid\", email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateSignup($gateSignUpDto: GateSignUpDto!){\n  gateSignup(gateSignUpDto:$gateSignUpDto) {\n    success\n    message{\n        en\n        ar\n    }\n    accessToken\n    refreshToken\n    userId\n  }\n}",
						"variables": "{\n    \"gateSignUpDto\": {\n        \"username\": \"game04\",\n        \"email\": \"{{emailid}}\",\n        \"password\": \"Samdhiva@12\",\n        \"appType\": \"GATE\",\n        \"countryCode\": \"IND\",\n        \"deviceType\": \"WEB\",\n        \"mobileNumber\": \"7807807\",\n        \"iBan\": \"1234567\",\n        \"restuarantName\": {\n            \"en\": \"GameRestaurent\",\n            \"ar\": \"GameRestaurent\"\n        }\n    }\n}"
					},
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Product Image Upload [REST]",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{main-server}}/api/product/image-upload",
					"host": [
						"{{main-server}}"
					],
					"path": [
						"api",
						"product",
						"image-upload"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product Category [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.createCategory.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Category Created Successfully\");\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation CreateCategory($categoryCreateInput: CategoryCreateInputDto!) {\n  createCategory(categoryCreateInput: $categoryCreateInput) {\n    success\n    message{\n        en\n        ar\n    }\n  }\n}\n",
						"variables": "{\n  \"categoryCreateInput\":  {\n    \"storeCode\": \"{{id}}\",\n    \"name\": {\"en\":\"Cake123ww\",\n    \"ar\": \"ArCategory1ww\"},\n    \"isEnable\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Search Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query searchProductBasedOnStore($storeProductSearchInputDto:StoreProductSearchInputDto!){\n    searchProductBasedOnStore(storeProductSearchInputDto:$storeProductSearchInputDto){\n         _id\n        productName{en\n       ar}\n       description{en\n       ar}\n       price{price}\n       payType\n       maxQuantity\n       categoryIds\n       storeCodes\n       isAvailable\n    }\n}",
						"variables": "{\n    \"storeProductSearchInputDto\":{\n        \"storeId\":\"{{id}}\",\n        \"productKey\":\"a\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"Productid\", response.data.createProduct._id);\r",
							"console.log(response.data.createProduct._id);\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Search Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  createProduct($productCreateInput:ProductCreateInputDto!){\n    createProduct(productCreateInput:$productCreateInput){\n    _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n    }\n}",
						"variables": "{\n    \"productCreateInput\": {\n        \"productName\": {\n            \"en\": \"Final testing\",\n            \"ar\": \"Final Testing\"\n        },\n        \"description\": {\n            \"en\": \"will be nice\",\n            \"ar\": \"will be nice\"\n        },\n        \"price\": {\n            \"price\": 20,\n            \"basePrice\":30,\n            \"vatPrice\":23\n        },\n        \"maxQuantity\": 23,\n        \"payType\": \"any\",\n        \"picture\": \"asas\",\n        \"isAvailable\": true,\n        \"categoryIds\": \"{{catId}}\",\n        \"storeCode\": \"{{id}}\",\n        \"ownerId\": \"{{userId}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Price [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Availability\");\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductPrice($productPriceEditInput:ProductPriceEditInputDto!){\nupdateProductPrice(productPriceEditInput:$productPriceEditInput){\n     success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n}\n}",
						"variables": "{\n    \"productPriceEditInput\": {\n        \"productId\": \"{{Productid}}\",\n        \"price\": {\n            \"price\": 10,\n            \"basePrice\": 10,\n            \"vatPrice\": 34\n        },\n        \"storeId\": \"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store [GQL]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"const response = pm.response.json();\r",
							"pm.environment.set(\"id\", response.data.getStore._id);\r",
							"console.log(response.data.getStore._id);\r",
							"//postman.setNextRequest(\"Create Product Category\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStore($ownerId: String!) {\n  getStore(ownerId: $ownerId) {\n    _id\n    name{\n        en\n        ar\n    }\n    ownerId\n  }\n}\n",
						"variables": "{\n  \"ownerId\": \"{{userId}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Availablility [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Delete Product\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductAvailability($productAvailabilityEditInput:ProductAvailabilityEditInputDto!){\nupdateProductAvailability(productAvailabilityEditInput:$productAvailabilityEditInput){\n      _id\n        productName{\n            en\n            ar \n        }\n       description{\n           en \n           ar \n       }\n       price{\n           price\n       }\n       payType\n       maxQuantity\n       categoryIds\n       storeCodes\n       isAvailable\n}\n}",
						"variables": "{\n    \"productAvailabilityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"isAvailable\":false,\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Single Product [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProduct($productId: String!) {\n   getProduct(productId:$productId) {\n       productName{\n           en\n           ar\n       }\n       description{\n           en\n           ar\n       }\n       price{\n           price\n       }\n       payType\n       maxQuantity\n       categoryIds\n       storeCodes\n       isAvailable\n   }\n}",
						"variables": "{\n    \"productId\":\"{{Productid}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Store Configuration",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  editStoreConfiguration($storeEditInput:StoreConfigurationEditInputDto!){\n   editStoreConfiguration(storeEditInput:$storeEditInput){\n     _id\n     branchCode\n     displayName{\n         en \n         ar \n     }\n     categoryIds\n    }\n}",
						"variables": "{\n    \"storeEditInput\":{\n        \"_id\":\"{{id}}\",\n        \"branchCode\":\"16\",\n        \"displayName\":{\"en\":\"nes\",\"ar\":\"nes\"},\n        \"storeCategoryIds\":[\"5f5735b5f044f836dac05a58\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Product Quantity [GQL]",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//postman.setNextRequest(\"Update Product Price\");"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateProductQuantity($productQuantityEditInput:ProductQuantityEditInputDto!){\nupdateProductQuantity(productQuantityEditInput:$productQuantityEditInput){\n       success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n}\n}",
						"variables": "{\n    \"productQuantityEditInput\":{\n        \"productId\":\"{{Productid}}\",\n        \"maxQuantity\":12,\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get stores using different multiple variable in GateApp`",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetStores($storeFindInputDto: StoreFindInputDto!){\n  getStores(storeFindInputDto:$storeFindInputDto) {\n    stores{\n      name{\n          en\n          ar\n      }\n    }\n    pagination{\n      page\n      hasNextPage\n      hasPrevPage\n      nextPage\n      prevPage\n    }\n  }\n}",
						"variables": "{\n  \"storeFindInputDto\": {\n    \"paginate\": {\n      \"page\": 1,\n      \"perPage\": 2\n    },\n    \"entityId\": \"5f86c404b2d623678a366cdf\",\n    \"geoHash\": \"tf2czbs\",\n    \"isAvailable\": true,\n    \"isChefOnline\": true\n  }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "update store availability",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateStoreAvailability($storeAvailabilityEditInput: StoreAvailabilityEditInputDto!) {\n  updateStoreAvailability(storeAvailabilityEditInput: $storeAvailabilityEditInput) {\n  _id\n    }\n}",
						"variables": "{\n    \"storeAvailabilityEditInput\":{\n    \"storeId\": \"{{id}}\",\n    \"isAvailable\": true\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Products Based On Store",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query GetProductsBasedOnStore($ storeProductFindInputDto: StoreProductFindInputDto!) {\n    getProductsBasedOnStore( storeProductFindInputDto:$ storeProductFindInputDto) {\n      products{\n            _id\n        productName{en\n        ar}\n       description{en\n       ar}\n       price{price}\n       payType\n       maxQuantity\n       categoryIds\n       storeCode\n       ownerId\n       isAvailable\n      }\n    }\n}",
						"variables": "{\n\"storeProductFindInputDto\":{\n    \"storeId\":\"{{id}}\",\n    \"paginate\":{\n        \"page\":1,\n        \"perPage\":10\n    }\n}\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Store Contact Address",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Your test name\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.data.editStoreContactAddress.status).to.eql(true);\r",
							"});\r",
							"pm.test(\"Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Store contact address updated\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation  editStoreContactAddress($storeEditInput:StoreContactAddressEditInputDto!){\n  editStoreContactAddress(storeEditInput:$storeEditInput){\n       success\n       message{\n           en \n           ar \n       }\n    }\n}",
						"variables": "{\n    \"storeEditInput\":{\n        \"_id\":\"{{id}}\",\n        \"coordinates\":[12.1212,99.1212],\n        \"address\":\"23,hajj\",\n        \"contactNumber\":\"9876543226\",\n        \"countryCode\":\"IND\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create Store Timing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createStoreTiming($storeTimingInput: StoreTimingInputDto!) {\n  createStoreTiming(storeTimingInput: $storeTimingInput) {\n      success\n      storeTiming{\n        storeId,\n        sun{\n        startHour,startMinute,endHour,endMinute\n        }\n        dateRange{\n        startDate\n        endDate\n        shifts {startHour,startMinute,endHour,endMinute}\n        }\n    }\n    }\n}",
						"variables": "{\n    \"storeTimingInput\": {\n        \"storeId\": \"{{id}}\",\n        \"sun\": [\n            {\n                \"startHour\": 10,\n                \"startMinute\": 10,\n                \"endHour\": 22,\n                \"endMinute\": 22\n            }\n        ],\n        \"dateRange\": [\n            {\n                \"startDate\":\"2020-11-14T00:00:00.000\",\n                \"endDate\": \"2020-11-16T00:00:00.000\",\n                \"shifts\": [\n                    {\n                        \"startHour\": 10,\n                        \"startMinute\": 10,\n                        \"endHour\": 15,\n                        \"endMinute\": 22\n                    }\n                ]\n            }\n        ]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Store Timing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getStoreTiming($storeId: String!) {\n  getStoreTiming(storeId: $storeId) {\n    success,\n    storeTiming{\n    storeId,\n    sun{\n      startHour,startMinute,endHour,endMinute\n    }\n    dateRange{\n      startDate\n      endDate\n      shifts {startHour,startMinute,endHour,endMinute}\n    }\n  }\n}\n}",
						"variables": "{\n  \"storeId\": \"{{id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetAvailableStoreIdList",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation getAvailableStoreIdList($datePaginate: StoreTimePaginateInputDTo!) {\n  getAvailableStoreIdList(datePaginate: $datePaginate) {\n  availableStoreIds\n}\n}",
						"variables": "{\n    \"datePaginate\": {\n        \"date\": \"2020-11-15T12:10:00.000\",\n        \"paginate\": {\n            \"page\": 1,\n            \"perPage\": 10\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Find Polygon",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query findPolygon($storeId: String!){\n  findPolygon(storeId: $storeId) {\n    polygon {\n      coordinates\n      type\n    }\n    GeoPolygon{\n      features{\n        geometry{\n          coordinates\n          type\n        }\n      }\n    }\n  }\n}\n",
						"variables": "{\n    \"storeId\": \"{{id}}\"\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "UpdateStoreGeohash",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation UpdateStoreGeohash($GeoJsonInput: GeoJsonDto!) {\n  updateStoreGeohash(geoJsonInput:$GeoJsonInput) {\n    success\n    message{\n      en\n      ar\n    }\n  }\n}",
						"variables": "\n{\n  \"GeoJsonInput\": {\n\t\"type\": \"POLYGON\",\n\t\"storeId\": \"{{id}}\",\n\t\"polygon\": {\n\t\t\"type\": \"POLYGON\",\n\t\t\"coordinates\": [\n\t\t\t[\n\t\t\t\t[80.14345328212892, 13.117950800041665],\n\t\t\t\t[80.13683873528791, 13.11766140769328],\n\t\t\t\t[80.1302774911996, 13.116795562699236],\n\t\t\t\t[80.12382242195775, 13.11536024237069],\n\t\t\t\t[80.14345328212892, 13.117950800041665]\n      ]\n    ]\n\t},\n\t\"geohash\": {\n\t\t\"precision\": 7,\n\t\t\"hashMode\": \"intersect\",\n\t\t\"minIntersect\": 0,\n\t\t\"allowDuplicates\": true,\n\t\t\"customWriter\": null\n\t},\n\t\"geoPoint\": \"DELIVERY_POINT\"\n}\n}\n"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product options",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation AddProductOptions($productOptionsInput:ProductOptionsInputDto!){\n    addProductOptions(productOptionsInput:$productOptionsInput){\n   success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n           options {\n          _id\n          isMandatory\n          minimumValues\n          maximumValues\n          mandatoryValues\n          isMandatory\n          picture\n          name {\n            en\n            ar\n          }\n          values {\n            _id\n            isDisabled\n            picture\n            name {\n              ar\n              en\n            }\n            price {\n              basePrice\n              price\n              vatPrice\n              vatPercentage\n              offerPrice\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n          }\n        }\n     }\n    }\n}",
						"variables": "{\n    \"productOptionsInput\": {\n        \"productId\": \"{{Productid}}\",\n        \"name\": {\n            \"en\": \"lastu\",\n            \"ar\": \"arabic1212\"\n        },\n        \"isDisabled\": false,\n        \"isMandatory\": false,\n        \"minimumValues\": 0,\n        \"maximumValues\": 0,\n        \"mandatoryValues\": [\n            \"String\"\n        ],\n        \"picture\": \"String\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit product option",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editProductOption($productEditOptionInput:ProductEditOptionInputDto!){\n    editProductOption(productEditOptionInput:$productEditOptionInput){\n    success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n      options {\n          _id\n          isMandatory\n          minimumValues\n          maximumValues\n          mandatoryValues\n          isMandatory\n          picture\n          name {\n            en\n            ar\n          }\n          values {\n            _id\n            isDisabled\n            picture\n            name {\n              ar\n              en\n            }\n            price {\n              basePrice\n              price\n              vatPrice\n              vatPercentage\n              offerPrice\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n          }\n        }\n     }\n    }\n}",
						"variables": "{\n    \"productEditOptionInput\": {\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"optionId\":\"603748fca8dc086e36135f56\",\n        \"name\": {\n            \"en\":\"edited  again\",\n            \"ar\":\"arabic\"\n        },\n        \"isDisabled\": false,\n        \"isMandatory\": false,\n        \"minimumValues\": 0,\n        \"maximumValues\": 10,\n        \"mandatoryValues\": [\n            \"String\"\n        ],\n        \"picture\": \"String\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete product option",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProductOption($productOptionsInput:ProductOptionsDeleteInputDto!){\n    deleteProductOption(productOptionsInput:$productOptionsInput){\n       success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n          options {\n          _id\n          isMandatory\n          minimumValues\n          maximumValues\n          mandatoryValues\n          isMandatory\n          picture\n          name {\n            en\n            ar\n          }\n          values {\n            _id\n            isDisabled\n            picture\n            name {\n              ar\n              en\n            }\n            price {\n              basePrice\n              price\n              vatPrice\n              vatPercentage\n              offerPrice\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n          }\n        }\n     }\n    }\n}",
						"variables": "{\n    \"productOptionsInput\": {\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"optionId\":\"60374a47a8dc086e36135f68\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product values",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation addProductValues($productValuesInput:ProductValuesInputDto!){\n    addProductValues(productValuesInput:$productValuesInput){\n       success\n      message {\n        en\n        ar\n      }\n      isNewProduct\n      oldStoreCode\n      product {\n        options {\n          _id\n          isMandatory\n          minimumValues\n          maximumValues\n          mandatoryValues\n          isMandatory\n          picture\n          name {\n            en\n            ar\n          }\n          values {\n            _id\n            isDisabled\n            picture\n            name {\n              ar\n              en\n            }\n            price {\n              basePrice\n              price\n              vatPrice\n              vatPercentage\n              offerPrice\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n          }\n        }\n      }\n    }\n}",
						"variables": "{\n    \"productValuesInput\": {\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"optionId\": \"603748fca8dc086e36135f56\",\n        \"storeId\":\"{{id}}\",\n        \"valuesData\": {\n            \"name\": {\n                \"en\": \"en\",\n                \"ar\": \"ar\"\n            },\n            \"price\": {\n                \"price\": 1,\n                \"basePrice\": 1,\n                \"vatPrice\": 1,\n                \"offerPrice\": 1,\n                \"vatPercentage\": 1\n            },\n            \"isDisabled\": false,\n            \"picture\": \"String\",\n            \"calories\": {\n                \"name\": {\n                    \"en\": \"en\",\n                    \"ar\": \"ar\"\n                },\n                \"value\": 0,\n                \"portion\": 0,\n                \"valueUnit\": \"calories\",\n                \"portionUnit\": \"gm\"\n            }\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "edit product values",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editProductValues($productValuesInput:ProductValuesInputDto!){\n    editProductValues(productValuesInput:$productValuesInput){\n     success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n          options {\n          _id\n          isMandatory\n          minimumValues\n          maximumValues\n          mandatoryValues\n          isMandatory\n          picture\n          name {\n            en\n            ar\n          }\n          values {\n            _id\n            isDisabled\n            picture\n            name {\n              ar\n              en\n            }\n            price {\n              basePrice\n              price\n              vatPrice\n              vatPercentage\n              offerPrice\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n          }\n        }\n     }\n    }\n}",
						"variables": "{\n    \"productValuesInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"optionId\": \"603748fca8dc086e36135f56\",\n        \"valuesData\": {\n            \"name\": {\n                \"en\": \"en\",\n                \"ar\": \"ar\"\n            },\n            \"price\": {\n                \"price\": 1,\n                \"basePrice\": 1,\n                \"vatPrice\": 1,\n                \"offerPrice\": 1,\n                \"vatPercentage\": 1\n            },\n            \"isDisabled\": false,\n            \"picture\": \"String\",\n            \"calories\": {\n                \"name\": {\n                    \"en\": \"en\",\n                    \"ar\": \"ar\"\n                },\n                \"value\": 0,\n                \"portion\": 0,\n                \"valueUnit\": \"calories\",\n                \"portionUnit\": \"gm\"\n            }\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Product Meals",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation addProductMeals($productMealsInput:ProductMealsInputDto!){\n    addProductMeals(productMealsInput:$productMealsInput){\n    success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n                 meals {\n          types {\n            name {\n              en\n              ar\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n            _id\n            picture\n            price {\n              basePrice\n              vatPrice\n              vatPercentage\n              offerPrice\n              price\n            }\n            isDisabled\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n  \n     }\n    }\n}",
						"variables": "{\n    \"productMealsInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"isMandatory\": false,\n        \"types\": {\n            \"name\": {\n                \"en\": \"type\",\n                \"ar\": \"ar\"\n            },\n            \"price\": {\n                \"price\": 0,\n                \"basePrice\": 0,\n                \"vatPrice\": 0,\n                \"offerPrice\": 0,\n                \"vatPercentage\": 0\n            },\n            \"isDisabled\": false,\n            \"picture\": \"String\",\n            \"calories\": {\n                \"name\": {\n                    \"en\": \"en\",\n                    \"ar\": \"ar\"\n                },\n                \"value\": 0,\n                \"portion\": 0,\n                \"valueUnit\": \"calories\",\n                \"portionUnit\": \"gm\"\n            }\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add product meals type",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation addProductMealsType($productTypesInput:ProductTypesCreateDto!){\n    addProductMealsType(productTypesInput:$productTypesInput){\n        success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n                 meals {\n          types {\n            name {\n              en\n              ar\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n            _id\n            picture\n            price {\n              basePrice\n              vatPrice\n              vatPercentage\n              offerPrice\n              price\n            }\n            isDisabled\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"productTypesInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"name\": {\n            \"en\": \"type2\",\n            \"ar\": \"ar\"\n        },\n        \"price\": {\n            \"price\": 0,\n            \"basePrice\": 0,\n            \"vatPrice\": 0,\n            \"offerPrice\": 0,\n            \"vatPercentage\": 0\n        },\n        \"isDisabled\": false,\n        \"picture\": \"String\",\n        \"calories\": {\n            \"name\": {\n                \"en\": \"en\",\n                \"ar\": \"ar\"\n            },\n            \"value\": 0,\n            \"portion\": 0,\n            \"valueUnit\": \"calories\",\n            \"portionUnit\": \"gm\"\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Edit Product Meals Type",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editProductMealsType($productTypesInput:ProductTypeEditDto!){\n    editProductMealsType(productTypesInput:$productTypesInput){\n      success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n               meals {\n          types {\n            name {\n              en\n              ar\n            }\n            calories {\n              name {\n                en\n                ar\n              }\n              portion\n              portionUnit\n              value\n              valueUnit\n            }\n            _id\n            picture\n            price {\n              basePrice\n              vatPrice\n              vatPercentage\n              offerPrice\n              price\n            }\n            isDisabled\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"productTypesInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"typeId\": \"603775628ab26d0e0f1df84f\",\n        \"name\": {\n            \"en\": \"edited type\",\n            \"ar\": \"ar\"\n        },\n        \"price\": {\n            \"price\": 0,\n            \"basePrice\": 0,\n            \"vatPrice\": 0,\n            \"offerPrice\": 0,\n            \"vatPercentage\": 0\n        },\n        \"isDisabled\": false,\n        \"picture\": \"String\",\n        \"calories\": {\n            \"name\": {\n                \"en\": \"en\",\n                \"ar\": \"ar\"\n            },\n            \"value\": 0,\n            \"portion\": 0,\n            \"valueUnit\": \"calories\",\n            \"portionUnit\": \"gm\"\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "AddProductMealsPackage",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation addProductMealsPackage($ProductPackagesInput:ProductPackagesInputDto!){\n    addProductMealsPackage(ProductPackagesInput:$ProductPackagesInput){\n      success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n              meals {\n          packages {\n            name {\n              en\n              ar\n            }\n            typeIds\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"ProductPackagesInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"packages\": {\n            \"name\": {\n                \"en\": \"package1\",\n                \"ar\": \"ar\"\n            },\n            \"isDisabled\": false,\n            \"isMandatory\": false,\n            \"picture\": \"String\",\n            \"typeIds\": [\n                \"5fe029f53f0afe5c38a32116\"\n            ]\n        }\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditProductMealsPackage",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation editProductMealsPackage($ProductPackagesInput:PackageEditDto!){\n    editProductMealsPackage(ProductPackagesInput:$ProductPackagesInput){\n       success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n             meals {\n          packages {\n            name {\n              en\n              ar\n            }\n            typeIds\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"ProductPackagesInput\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"packageId\": \"6037766d8ab26d0e0f1df885\",\n        \"name\": {\n            \"en\": \"edited meal package\",\n            \"ar\": \"ar\"\n        },\n        \"isDisabled\": false,\n        \"isMandatory\": false,\n        \"picture\": \"String\",\n        \"typeIds\": [\n            \"String\"\n        ]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteProductMealsPackage",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProductMealsPackage($ProductPackagesInput:ProductPackageDeleteInputDto!){\n    deleteProductMealsPackage(ProductPackagesInput:$ProductPackagesInput){\n       success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n               meals {\n          packages {\n            name {\n              en\n              ar\n            }\n            typeIds\n          }\n        }\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"ProductPackagesInput\": {\n        \"productId\": \"{{Productid}}\",\n        \"packageId\": \"60124e33f2522520c1a2e42c\",\n        \"storeId\":\"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteProductMealsType",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteProductMealsType($ProductTypesInput:ProductTypeDeleteInputDto!){\n    deleteProductMealsType(ProductTypesInput:$ProductTypesInput){\n       success\n     message {\n         en\n         ar\n     }\n     isNewProduct\n     oldStoreCode\n     product {\n         _id\n    productName{en\n    ar}\n    description{en\n    ar}\n    maxQuantity\n    price{price}\n    payType\n    picture\n    isAvailable\n     }\n    }\n}",
						"variables": "{\n    \"ProductTypesInput\": {\n        \"productId\": \"60374882a8dc086e36135f4e\",\n        \"typeId\": \"5fe02a103f0afe5c38a3211f\",\n        \"storeId\":\"{{id}}\"   \n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ToggleProductOptions",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleProductOptions($productOptionsToggle:ProductOptionToggleDto!){\n    toggleProductOptions(productOptionsToggle:$productOptionsToggle){\n    success\n    message{\n        en\n        ar\n    } \n    \n    }\n}",
						"variables": "{\n    \"productOptionsToggle\": {\n        \"storeId\":\"{{id}}\",\n        \"productId\": \"5fe028493f0afe5c38a320e1\",\n        \"optionId\": \"5fe028b33f0afe5c38a320e6\",\n        \"isDisabled\": true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ToggleProductValues",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleProductValues($productValuesToggle:ProductValuesToggleDto!){\n    toggleProductValues(productValuesToggle:$productValuesToggle){\n    success\n    message{\n        en\n        ar\n    } \n    \n    }\n}",
						"variables": "{\n    \"productValuesToggle\": {\n         \"storeId\":\"{{id}}\",\n        \"productId\": \"5fe028493f0afe5c38a320e1\",\n        \"optionId\": \"5fe028b33f0afe5c38a320e6\",\n        \"valuesId\": \"5fe029693f0afe5c38a32108\",\n        \"isDisabled\": true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ToggleProductMeals",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleProductMeals($productMealsToggle:ProductMealsToggleDto!){\n    toggleProductMeals(productMealsToggle:$productMealsToggle){\n    success\n    message{\n        en\n        ar\n    } \n    \n    }\n}",
						"variables": "{\n    \"productMealsToggle\": {\n         \"storeId\":\"{{id}}\",\n        \"productId\": \"5fe028493f0afe5c38a320e1\",\n        \"mealsId\": \"5fe06f98ebcf9f138332cb39\",\n        \"isDisabled\": true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ToggleProductMealTypes",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleProductMealTypes($productMealTypesToggle:ProductMealTypesToggleDto!){\n    toggleProductMealTypes(productMealTypesToggle:$productMealTypesToggle){\n    success\n    message{\n        en\n        ar\n    } \n    \n    }\n}",
						"variables": "{\n    \"productMealTypesToggle\": {\n         \"storeId\":\"{{id}}\",\n        \"productId\": \"5fe028493f0afe5c38a320e1\",\n        \"productMealId\": \"5fe06f98ebcf9f138332cb39\",\n        \"productMealTypesId\": \"5fe06f98ebcf9f138332cb3a\",\n        \"isDisabled\": true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "ToggleProductMealPackages",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation toggleProductMealPackages($productMealPackagesToggle:ProductMealPackagesToggleDto!){\n    toggleProductMealPackages(productMealPackagesToggle:$productMealPackagesToggle){\n    success\n    message{\n        en\n        ar\n    } \n    \n    }\n}",
						"variables": "{\n    \"productMealPackagesToggle\": {\n         \"storeId\":\"{{id}}\",\n        \"productId\": \"5fe028493f0afe5c38a320e1\",\n        \"productMealId\": \"5fe06f98ebcf9f138332cb39\",\n        \"productMealPackagesId\": \"5fe06f98ebcf9f138332cb3a\",\n        \"isDisabled\": true\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateBranchAdminAndStore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation createBranchAdminAndStore($createBranchInput: BranchAdminAndStoreCreateDto!) {\n  createBranchAdminAndStore(createBranchInput: $createBranchInput) {\n    success\n    message{en,ar}\n    storeDetails{\n        _id\n        name{en\n        ar}\n        displayName{en\n        ar}\n        branchCode\n        countryCode\n        description{\n            en\n            ar\n        }\n        address\n        picture\n        logo\n        ownerId\n        parentId\n        categoryIds\n        status\n        contactNumber\n        }\n    }\n}",
						"variables": "{\n    \"createBranchInput\": {\n        \"parentAdminId\": \"{{userId}}\",\n        \"parentStoreId\": \"{{id}}\",\n        \"username\": \"String665\",\n        \"email\": \"Strin555g@st.com\",\n        \"password\": \"String\",\n        \"appType\": \"GATE\",\n        \"deviceType\": \"ANDROID\",\n        \"mobileNumber\": \"7807807\",\n        \"countryCode\": \"IND\",\n        \"iBan\": \"String\",\n        \"restaurantName\":{\"en\": \"String\",\n        \"ar\": \"String\"},\n        \"branchCode\": \"String\",\n        \"contactNumber\": \"7807807\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetBranches",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query getBranches($branchFindInputDto: GetBranchesInputDto!) {\n  getBranches(branchFindInputDto: $branchFindInputDto) {\n    pagination{\n        hasPrevPage\n        hasNextPage\n        prevPage\n        nextPage\n        perPage\n        }\n    stores{\n        _id\n        name{en \n        ar}\n        displayName{en\n        ar}\n        branchCode\n        countryCode\n        description{\n            en\n            ar\n        }\n        address\n        storeLoc{coordinates,\n                type}\n        picture\n        logo\n        ownerId\n        parentId\n        categoryIds\n        status\n        productCategories{\n          name{en\n          ar}\n            isEnable  \n            _id\n        }\n        isChefOnline\n        isAvailable\n        contactNumber\n    }\n    }\n}",
						"variables": "{\n    \"branchFindInputDto\": {\n        \"paginate\": {\n            \"page\": 1,\n            \"perPage\": 10\n        },\n        \"parentId\": \"{{id}}\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteBranchAdminAndStore",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation deleteBranchAdminAndStore($deleteBranchInput: DeleteBranchInputDto!) {\n  deleteBranchAdminAndStore(deleteBranchInput: $deleteBranchInput) {\n      success\n      message{\n          en\n          ar\n      }\n    }\n}",
						"variables": "{\n    \"deleteBranchInput\": {\n        \"restaurantId\": \"{{id}}\",\n        \"ownerId\": \"5fe5b4d5734ad30d7bfd1b5e\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "updateStoreTags",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-Token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation updateStoreTags($storeTagsUpdateDto: StoreTagsUpdateInputDto!){\n  updateStoreTags(storeTagsUpdateDto:$storeTagsUpdateDto) {\n      success\n      message{\n          en\n          ar\n      }\n  }\n}",
						"variables": "{\n    \"storeTagsUpdateDto\": {\n        \"storeId\": \"5fe60d781074ec6ede9c6e50\",\n        \"tagIds\": [\"5fe606301074ec6ede9c6e49\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "SearchStoreBranches",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "query searchStoreBranches($branchesSearchInputDto:StoreBranchSearchInputDto!) {\n  searchStoreBranches(branchesSearchInputDto: $branchesSearchInputDto) {\n        _id\n        name{en \n        ar}\n        displayName{en\n        ar}\n        branchCode\n        countryCode\n        description{\n            en\n            ar\n        }\n        address\n        storeLoc{coordinates,\n                type}\n        picture\n        logo\n        ownerId\n        parentId\n        categoryIds\n        status\n        productCategories{\n          name{en\n          ar}\n            isEnable  \n            _id\n        }\n        isChefOnline\n        isAvailable\n        contactNumber\n    }\n}",
						"variables": "{\n    \"branchesSearchInputDto\": {\n        \"parentId\": {{id}},\n        \"searchkey\": \"la\"\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CloneMultipleProductsToParticularBranches",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation cloneMultipleProductsToParticularBranches($productCloneInput:CloneMultipleProductsToParticularBranchesInputDto!) {\n  cloneMultipleProductsToParticularBranches(productCloneInput: $productCloneInput) {\n       success\n       message {\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"productCloneInput\": {\n        \"storeId\": {{id}},\n        \"branchIds\": [\"60099b752147074ed367b92d\"],\n        \"productCodes\":[\"601b883f39c4a40776f828b6\"],\n        \"categoryIds\":[\"601b881839c4a40776f828b4\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "cloneMultipleProductsToAllBranches",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation cloneMultipleProductsToAllBranches($productCloneInput:CloneMultipleProductsToAllBranchesInputDto!) {\n  cloneMultipleProductsToAllBranches(productCloneInput: $productCloneInput) {\n       success\n       message {\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"productCloneInput\": {\n        \"storeId\": {{id}},\n        \"productCodes\":[\"601b883f39c4a40776f828b6\"],\n        \"categoryIds\":[\"601b881839c4a40776f828b4\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CloneAllProductsToParticularBranches",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation cloneAllProductsToParticularBranches($productCloneInput:CloneAllProductsToParticularBranchesInputDto!) {\n  cloneAllProductsToParticularBranches(productCloneInput: $productCloneInput) {\n       success\n       message {\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"productCloneInput\": {\n        \"storeId\": {{id}},\n        \"branchIds\": [\"60099b752147074ed367b92d\"],\n        \"categoryIds\":[\"601b881839c4a40776f828b4\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CloneAllProductsToAllBranches",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{access-token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation cloneAllProductsToAllBranches($productCloneInput:CloneAllProductsToAllBranchesInputDto!) {\n  cloneAllProductsToAllBranches(productCloneInput: $productCloneInput) {\n       success\n       message {\n           en\n           ar\n       }\n    }\n}",
						"variables": "{\n    \"productCloneInput\": {\n        \"storeId\": {{id}},\n         \"categoryIds\":[\"601b881839c4a40776f828b4\"]\n    }\n}"
					}
				},
				"url": {
					"raw": "{{main-server-gql}}",
					"host": [
						"{{main-server-gql}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GateLogout",
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{refreshToken}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "graphql",
					"graphql": {
						"query": "mutation GateLogout{\n  gateLogout{\n    success\n    message{\n        en\n        ar\n        }\n    }\n}",
						"variables": ""
					}
				},
				"url": {
					"raw": "{{auth-server-gql}}",
					"host": [
						"{{auth-server-gql}}"
					]
				}
			},
			"response": []
		}
	]
}